<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="newshore_booking" enabled="true">
      <stringProp name="TestPlan.comments">	</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="CUSTOMER - ENVIRONMENT" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GLOBAL_ENVIRONMENT" elementType="Argument">
            <stringProp name="Argument.name">GLOBAL_ENVIRONMENT</stringProp>
            <stringProp name="Argument.value">DEV</stringProp>
            <stringProp name="Argument.desc">LOCAL / DEV / TEST / UAT / STAGE / PRO</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="--------------------------" elementType="Argument">
            <stringProp name="Argument.name">--------------------------</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GLOBAL_USERS_PER_THREAD" elementType="Argument">
            <stringProp name="Argument.name">GLOBAL_USERS_PER_THREAD</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GLOBAL_THREAD_LOOPS" elementType="Argument">
            <stringProp name="Argument.name">GLOBAL_THREAD_LOOPS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GLOBAL_RAMP_UP_SECONDS" elementType="Argument">
            <stringProp name="Argument.name">GLOBAL_RAMP_UP_SECONDS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GLOBAL_TEST_DURATION_SECONDS" elementType="Argument">
            <stringProp name="Argument.name">GLOBAL_TEST_DURATION_SECONDS</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="General variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="defaultOutboundDate" elementType="Argument">
            <stringProp name="Argument.name">defaultOutboundDate</stringProp>
            <stringProp name="Argument.value">2021-06-22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="defaultReturnDate" elementType="Argument">
            <stringProp name="Argument.name">defaultReturnDate</stringProp>
            <stringProp name="Argument.value">2021-06-30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF1 - Trip Types" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 


//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 1);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT  HOLD" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 


//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 2);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);

if (booking.pax.length != ${expectedPaxCount}) {
	 AssertionResult.setFailureMessage(&quot;Booking has pax failed&quot;);
	 AssertionResult.setFailure(true);	 	
}
if (booking.journeys.length !=  ${expectedJourneysCount}){
	 AssertionResult.setFailureMessage(&quot;Booking has journey failed&quot;);
	 AssertionResult.setFailure(true);		
}
if (booking.bookingInfo.status != &apos;Hold&apos;){
	AssertionResult.setFailureMessage(&quot;Booking on hold failed&quot;);
	AssertionResult.setFailure(true);		
}

	</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on hold" enabled="false">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Hold</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has journey" enabled="false">
                <stringProp name="JSON_PATH">$.booking.journeys.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedJourneysCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF2 - Pax Types" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT 1CHD  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 2);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT 1CHD 1INF  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 1);


</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  2ADT 1CHD 2INF  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;2&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;2&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 5);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 2);
vars.put(&quot;expectedPaxInfantCount&quot;, 2);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  3ADT 6CHD 3INF  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;6&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;3&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 12);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 6);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 3);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  9ADT 9INF  HOLD" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;9&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;9&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore();

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 18);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 9);
vars.put(&quot;expectedPaxInfantCount&quot;, 9);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  5ADT 4CHD 5INF  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;5&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;4&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;5&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 14);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 4);
vars.put(&quot;expectedPaxAdultCount&quot;, 5);
vars.put(&quot;expectedPaxInfantCount&quot;, 5);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var countADT = 0;
var countINF = 0;
var countCHD = 0;

if (booking.bookingInfo.status != &apos;Hold&apos;){
	assertFail(&apos;Booking on hold failed&apos;);		
}
if (booking.journeys.length !=  ${expectedJourneysCount}){
	assertFail(&apos;Booking has journey failed&apos;);	
}
if (booking.pax.length != ${expectedPaxCount}) {
	assertFail(&apos;Booking has journey failed&apos;);	
}

for ( var i = 0; i &lt; booking.pax.length; i++){
	if (booking.pax[i].type.code == &apos;ADT&apos;){
		countADT++;			
	  }	
	if (booking.pax[i].type.code == &apos;INF&apos;){
		countINF++;			
	  }	
	if (booking.pax[i].type.code == &apos;CHD&apos;){
		countCHD++;			
	  }		  
}

if (countADT != ${expectedPaxAdultCount}) {
	assertFail(&apos;Booking has adult pax failed&apos;);	
}
if (countINF != ${expectedPaxInfantCount}) {
	assertFail(&apos;Booking has infant pax failed&apos;);	
}
if (countCHD != ${expectedPaxChildCount}) {
	assertFail(&apos;Booking has child pax failed&apos;);	
}

function assertFail(messageError){
	 AssertionResult.setFailureMessage(messageError);
	 AssertionResult.setFailure(true);	 		
}



	</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on hold" enabled="false">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Hold</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has journey" enabled="false">
                <stringProp name="JSON_PATH">$.booking.journeys.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedJourneysCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has adult pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax[*].type.[?(@.code == &apos;ADT&apos;)].code.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxAdultCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">true</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has child pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax[*].type[?(@.code == &apos;CHD&apos;)].code.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxChildCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">true</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has infant pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax[*].type[?(@.code == &apos;INF&apos;)].code.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxInfantCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">true</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="[POSTPONED] BF3 - Routes" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW 1ADT  HOLD -  Domestic" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW 1ADT  HOLD -  International" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on hold" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Hold</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF4 -Fares" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT FLY  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &apos;YA&apos;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT FLY  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);
//SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT FLY+  HOLD" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YB&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &apos;YB&apos;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT FLY+  HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YB&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YB&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedoutboundProductClass&quot;, &apos;YB&apos;);
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on hold" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Hold</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has journey" enabled="false">
                <stringProp name="JSON_PATH">$.booking.journeys.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedJourneysCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has only one pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking outbound Product Class" enabled="false">
                <stringProp name="JSON_PATH">$.booking.journeys[*].fares[*].productClass</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedoutboundProductClass}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var count = 0;
var productClass = vars.get(&quot;expectedoutboundProductClass&quot;);

for ( var i = 0; i &lt; booking.pax.length; i++){
	if (booking.pax[i].type.code == &apos;ADT&apos;){
	count++;
	}
}

if (booking.journeys.length != ${expectedJourneysCount}) {
		assertFail(&quot;Booking has journeys failed&quot;);		
}

if (count != ${expectedPaxCount}) {
	assertFail(&quot;Booking has pax failed&quot;);
}

if (booking.journeys[0].fares[0].productClass != productClass){
	assertFail(&quot;Booking has Product Class failed&quot;);
}		

function assertFail(messageError){
     AssertionResult.setFailureMessage(messageError);
     AssertionResult.setFailure(true);             
}



</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="[DISCARDED] BF5 - Pax info special cases  (REQUIRES CODING JS)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT(UNDER 16 YEARS) 1CHD  NOT ALLOWED" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT 1ADT(UNDER 16 YEARS) 1CHD  NOT ALLOWED" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW 1ADT 1INF(UNDER 8 DAYS) NOT ALLOWED" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT 1INF(UNDER 8 DAYS) NOT ALLOWED" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on hold" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Hold</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF6 - Travel documents" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[POSTPONED] [TESTCASE] OW  1ADT  HOLD - INTERNATIONAL - PASSPORT" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

vars.put(&quot;docType&quot;,&quot;P&quot;);
vars.put(&quot;docNumber&quot;,&quot;540675805&quot;);
vars.put(&quot;docIssuedCountry&quot;,&quot;GB&quot;); 
vars.put(&quot;docExpirationDate&quot;,&quot;2024-09-11&quot;);
vars.put(&quot;birthDate&quot;,&quot;1968-05-19&quot;);
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT  HOLD - DOMESTIC - IQAMA" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 


vars.put(&quot;docType&quot;,&quot;I&quot;); 
vars.put(&quot;docNumber&quot;,&quot;2443697533&quot;);
vars.put(&quot;docIssuedCountry&quot;,&quot;GB&quot;);
vars.put(&quot;docExpirationDate&quot;,&quot;2024-09-11&quot;);
vars.put(&quot;birthDate&quot;,&quot;1968-05-19&quot;);

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expecteddocType&quot;, &apos;I&apos;);
vars.put(&quot;expectedNationality&quot;, &apos;SA&apos;);
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT  HOLD - DOMESTIC - NATIONALID" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 


vars.put(&quot;docType&quot;,&quot;N&quot;); 
vars.put(&quot;docNumber&quot;,&quot;1085539433&quot;);
vars.put(&quot;docIssuedCountry&quot;,&quot;SA&quot;);
vars.put(&quot;docExpirationDate&quot;,&quot;2024-09-11&quot;);
vars.put(&quot;birthDate&quot;,&quot;1992-07-24&quot;);

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expecteddocType&quot;, &apos;N&apos;);
vars.put(&quot;expectedDomesticNationality&quot;, &apos;SA&apos;);
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT  HOLD - DOMESTIC - PASSPORT" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 


vars.put(&quot;docType&quot;,&quot;P&quot;); 
vars.put(&quot;docNumber&quot;,&quot;XDC35961&quot;);
vars.put(&quot;docIssuedCountry&quot;,&quot;AR&quot;);
vars.put(&quot;docExpirationDate&quot;,&quot;2024-09-11&quot;);
vars.put(&quot;birthDate&quot;,&quot;1968-05-19&quot;);

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expecteddocType&quot;, &apos;P&apos;);
vars.put(&quot;expectedNationality&quot;, &apos;SA&apos;);
SampleResult.setIgnore()

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;adultsData&quot;,JSON.stringify(data));

var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;${birthDate}&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;${docType}&quot;,
      &quot;docNumber&quot;:&quot;${docNumber}&quot;,
      &quot;docIssuedCountry&quot;:&quot;${docIssuedCountry}&quot;,
      &quot;docExpirationDate&quot; : &quot;${docExpirationDate}&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on hold" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Hold</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has only one pax" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has document" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax[*].documents[*].type</stringProp>
                <stringProp name="EXPECTED_VALUE">${expecteddocType}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is one way" enabled="false">
                <stringProp name="JSON_PATH">$.booking.journeys.size()</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedJourneysCount}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has correct nationality (Iqama, passport)" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax[*].documents[*].nationality</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedNationality}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">true</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has correct nationality (NationalId)" enabled="false">
                <stringProp name="JSON_PATH">$.booking.pax[*].documents[*].nationality</stringProp>
                <stringProp name="EXPECTED_VALUE">${expectedDomesticNationality}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var count = 0;

for ( var i = 0; i &lt; booking.pax.length; i++){
	if (booking.pax[i].type.code == &apos;ADT&apos;){
	count++;
	}
}

if (booking.journeys.length != ${expectedJourneysCount}) {
		assertFail(&quot;Booking has journey failed&quot;);
}

if (count != ${expectedPaxCount}) {
	assertFail(&quot;Booking has pax failed&quot;);
}

if ((booking.pax[0].documents[0].type == &quot;I&quot;) || (booking.pax[0].documents[0].type == &quot;P&quot;)) {
	if(booking.pax[0].documents[0].nationality == &quot;SA&quot;){
	assertFail(&quot;Booking has correct document failed&quot;);
	}
}

if ((booking.pax[0].documents[0].type == &quot;N&quot;) &amp;&amp; (booking.pax[0].documents[0].nationality != &quot;SA&quot;)) {
	assertFail(&quot;Booking has correct document failed&quot;);	
}

function assertFail(messageError){
     AssertionResult.setFailureMessage(messageError);
     AssertionResult.setFailure(true);             
}


	




</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF7 - Payments" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT SADAD" enabled="false">
          <stringProp name="TestPlan.comments">verify outboundDate &gt; 48h</stringProp>
        </GenericController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;SADAD&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;,&quot;false&quot;);

vars.put(&quot;ShouldBookingBeConfirmed&quot;,&quot;false&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-05-19&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxChildCount&quot;, 0);

</stringProp>
            <stringProp name="TestPlan.comments">verify outboundDate &gt; 48h</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT 1CHD VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
//vars.put(&quot;outboundDate&quot;,&quot;2021-05-18&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 2);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedPayMethod&quot;, &quot;V1&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PENDING] [TESTCASE] RT  2ADT 1INF VOUCHER-FULL" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;2&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;VO&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

vars.put(&quot;voucherNumber&quot;,&quot;10096382781400002&quot;);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, &quot;true&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxAdultCount&quot;, 2);
vars.put(&quot;expectedPaxInfantCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedPayMethod&quot;, &quot;VO&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PENDING] [TESTCASE] OW 1ADT CREDIT SHELL" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;AHB&quot;);
vars.put(&quot;destination&quot;,&quot;JED&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;,&quot;false&quot;);

vars.put(&quot;ShouldBookingBeConfirmed&quot;,&quot;false&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-05-19&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxChildCount&quot;, 0);

</stringProp>
            <stringProp name="TestPlan.comments">verify outboundDate &gt; 48h</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] contacts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;contacts&quot;:[&#xd;
      {&#xd;
         &quot;id&quot;:&quot;&quot;,&#xd;
         &quot;mktOption&quot;:false,&#xd;
         &quot;name&quot;:{&#xd;
            &quot;title&quot;:&quot;MR&quot;,&#xd;
            &quot;first&quot;:&quot;contactname&quot;,&#xd;
            &quot;last&quot;:&quot;contactlastname&quot;&#xd;
         },&#xd;
         &quot;address&quot;:{&#xd;
            &quot;addressLine&quot;:&quot;street&quot;,&#xd;
            &quot;city&quot;:&quot; baltimore&quot;,&#xd;
            &quot;country&quot;:&quot;US&quot;,&#xd;
            &quot;zipCode&quot;:&quot;12312&quot;,&#xd;
            &quot;province&quot;:&quot;AZ&quot;&#xd;
            &#xd;
         },&#xd;
         &quot;channels&quot;:[&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Email&quot;,&#xd;
               &quot;info&quot;:&quot;juan.martinez@newshore.es&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Phone&quot;,&#xd;
               &quot;info&quot;:&quot;123123123&quot;,&#xd;
               &quot;prefix&quot;:&quot;1&quot;&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${contactsDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${contactsPath}/api/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${ContactsApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] availablemethods" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/availablemethods</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF NOT PSS PRO" enabled="true">
              <stringProp name="IfController.condition">&quot;${Is_PSS_PRO}&quot; == &quot;false&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Selection" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MC Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;MC&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment MC" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${MC_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;MC&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VI Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VI&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VI" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;VI&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AX Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;AX&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment AX" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${AX_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;1234&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;AX&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DS Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;DS&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment DS" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${DS_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;DS&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sberbank Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SBERBANK&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SBERBANK" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/external?Type=PrePaid&amp;Method=${paymentMethod}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paymentUrl Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">paymentUrl</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${paymentUrl}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="OrderId Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">orderId</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;orderId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="bindingId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">bindingId</stringProp>
                        </elementProp>
                        <elementProp name="orderId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">orderId</stringProp>
                        </elementProp>
                        <elementProp name="language" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EN</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">language</stringProp>
                        </elementProp>
                        <elementProp name="card-number" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111   1111   1111   1111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">card-number</stringProp>
                        </elementProp>
                        <elementProp name="pan" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111111111111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pan</stringProp>
                        </elementProp>
                        <elementProp name="month" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">month</stringProp>
                        </elementProp>
                        <elementProp name="year" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2024</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">year</stringProp>
                        </elementProp>
                        <elementProp name="cardholderName" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">asdas asdad</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cardholderName</stringProp>
                        </elementProp>
                        <elementProp name="cvc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cvc</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${paymentUrl}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKey Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKey</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaReq&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaReq" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKey}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaReq</stringProp>
                        </elementProp>
                        <elementProp name="TermUrl" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${SBERBANK_dns}/ab/rest/finish3ds.do?lang</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TermUrl</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">640</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authorizedSecurityCodeForPayment Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authorizedSecurityCodeForPayment</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;acctId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="acctId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${authorizedSecurityCodeForPayment}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">acctId</stringProp>
                        </elementProp>
                        <elementProp name="password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12345678</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">53</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKeyResponse Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKeyResponse</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaRes&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaRes" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKeyResponse}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaRes</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/rest/finish3ds.do?lang=en</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1355631740">Operation declined. Please check the data and available balance of the card.</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SADAD Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SADAD&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SADAD" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&quot;holder&quot;:&quot;SADAD&quot;,&quot;number&quot;:&quot;0000000000000000&quot;,&quot;verifyCode&quot;:&quot;000&quot;,&quot;expirationMonth&quot;:&quot;7&quot;,&quot;expirationYear&quot;:&quot;2021&quot;,&quot;method&quot;:&quot;SD&quot;,&quot;collectedCurrencyCode&quot;:&quot;&quot;,&quot;DccStatus&quot;:&quot;NotOffered&quot;,&quot;type&quot;:&quot;CreditCard&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="V1 Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;V1&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment V1" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;V1&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VO Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VO&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VO" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${voucherNumber}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/voucher</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If booking is not confirmed" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookingStatus}&quot; != &quot;Confirmed&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Payment Validates OK" enabled="true">
                <stringProp name="IfController.condition">${isPaymentOk}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                </hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">paxId;paxId2</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id;$.booking.pax[1].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA;NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bookingStatus extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">bookingStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If record locator, then" enabled="true">
                  <stringProp name="IfController.condition">&quot;${recordLocator}&quot; != &quot;NO_DATA&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldValidatePaymentExternally" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldValidatePaymentExternally}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] payment" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;PaymentId&quot;: &quot;${paymentId}&quot;&#xd;
}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                      <stringProp name="HTTPSampler.method">PATCH</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldWaitUntilPaymentIsApproved" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldWaitUntilPaymentIsApproved}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While not Approved" enabled="true">
                      <stringProp name="WhileController.condition">${__javaScript(&quot;${isPaymentApproved}&quot; != &quot;Approved&quot;)} </stringProp>
                    </WhileController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentApproved" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">isPaymentApproved</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$..payments..status</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Etickets required" enabled="true">
                    <stringProp name="IfController.condition">&quot;${EticketsGenerationRequired}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] etickets generation" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/etickets</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldBookingBeConfirmed" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldBookingBeConfirmed}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has adult pax" enabled="false">
                        <stringProp name="JSON_PATH">$.booking.pax.*.type[?(@.code == &apos;ADT&apos;)].code.length()</stringProp>
                        <stringProp name="EXPECTED_VALUE">${expectedPaxAdultCount}</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">false</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has journey" enabled="false">
                        <stringProp name="JSON_PATH">$.booking.journeys.size()</stringProp>
                        <stringProp name="EXPECTED_VALUE">${expectedJourneysCount}</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">false</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has pax" enabled="false">
                        <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                        <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">false</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has infant pax" enabled="false">
                        <stringProp name="JSON_PATH">$.booking.pax[*].type[?(@.code == &apos;INF&apos;)].code.size()</stringProp>
                        <stringProp name="EXPECTED_VALUE">${expectedPaxInfantCount}</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">false</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var countADT = 0;
var countINF = 0;
var countCHD = 0; 
var payMethod = vars.get(&quot;expectedPayMethod&quot;);

if (booking.journeys.length !=  ${expectedJourneysCount}){
    assertFail(&apos;Booking has journey failed&apos;);    
}
if (booking.pax.length != ${expectedPaxCount}) {
    assertFail(&apos;Booking has journey failed&apos;);    
} 

for ( var i = 0; i &lt; booking.pax.length; i++){
    if (booking.pax[i].type.code == &apos;ADT&apos;){
        countADT++;            
      }    
    if (booking.pax[i].type.code == &apos;INF&apos;){
        countINF++;            
      }    
    if (booking.pax[i].type.code == &apos;CHD&apos;){
        countCHD++;            
      }          
} 

if (countADT != ${expectedPaxAdultCount}) {
    assertFail(&apos;Booking has adult pax failed&apos;);    
}
if (countINF != ${expectedPaxInfantCount}) {
    assertFail(&apos;Booking has infant pax failed&apos;);    
}
if (countCHD != ${expectedPaxChildCount}) {
    assertFail(&apos;Booking has child pax failed&apos;);    
}

if (booking.payments[0].paymentMethod != payMethod) {
    assertFail(&apos;Booking has payMethod failed&apos;);    
}




function assertFail(messageError){
     AssertionResult.setFailureMessage(messageError);
     AssertionResult.setFailure(true);             
}

</stringProp>
                        <stringProp name="scriptLanguage">javascript</stringProp>
                      </JSR223Assertion>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on confirmed" enabled="true">
                        <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                        <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF8 - Baggage" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Meal&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT FLY 1X25KG VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XP25\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxBaggage15Count&quot;, 0);
vars.put(&quot;expectedPaxBaggage25Count&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT FLY+ 1X25KG VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YB&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YB&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XP25\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxBaggage25Count&quot;, 3);
vars.put(&quot;expectedPaxBaggage15Count&quot;, 0);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YB&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT 1CHD 1INF FLY 2X25KG VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XP25\&quot;,\&quot;XP25\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()


//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 1);
vars.put(&quot;expectedPaxBaggage15Count&quot;, 0);
vars.put(&quot;expectedPaxBaggage25Count&quot;, 2);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  3ADT 2CHD 2INF FLY+ 2X25KG VISA-NO-3DS" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YB&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YB&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;2&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;2&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XP25\&quot;,\&quot;XP25\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 7);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 2);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 2);
vars.put(&quot;expectedPaxBaggage25Count&quot;, 12);
vars.put(&quot;expectedPaxBaggage15Count&quot;, 0);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YB&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  1ADT FLY 1X15KG  1X25KG VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XP25\&quot;,\&quot;XP15\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxBaggage15Count&quot;, 1);
vars.put(&quot;expectedPaxBaggage25Count&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] contacts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;contacts&quot;:[&#xd;
      {&#xd;
         &quot;id&quot;:&quot;&quot;,&#xd;
         &quot;mktOption&quot;:false,&#xd;
         &quot;name&quot;:{&#xd;
            &quot;title&quot;:&quot;MR&quot;,&#xd;
            &quot;first&quot;:&quot;contactname&quot;,&#xd;
            &quot;last&quot;:&quot;contactlastname&quot;&#xd;
         },&#xd;
         &quot;address&quot;:{&#xd;
            &quot;addressLine&quot;:&quot;street&quot;,&#xd;
            &quot;city&quot;:&quot; baltimore&quot;,&#xd;
            &quot;country&quot;:&quot;US&quot;,&#xd;
            &quot;zipCode&quot;:&quot;12312&quot;,&#xd;
            &quot;province&quot;:&quot;AZ&quot;&#xd;
            &#xd;
         },&#xd;
         &quot;channels&quot;:[&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Email&quot;,&#xd;
               &quot;info&quot;:&quot;juan.martinez@newshore.es&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Phone&quot;,&#xd;
               &quot;info&quot;:&quot;123123123&quot;,&#xd;
               &quot;prefix&quot;:&quot;1&quot;&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${contactsDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${contactsPath}/api/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${ContactsApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Booking Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] services" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;serviceTypes&quot;:${AvailableServices}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/services</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${PricingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pricedServices" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pricedServices</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.services</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_SERVICE</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SELL SERVICES" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic vars" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1474422496">paxesToSellServices</stringProp>
                  <stringProp name="737251200">paxToSellServicesIndex</stringProp>
                  <stringProp name="453212524">servicesToSellForCurrentPax</stringProp>
                  <stringProp name="1565339049">servicesForPaxToSellIndex</stringProp>
                  <stringProp name="-194185552">serviceId</stringProp>
                  <stringProp name="-1928886718">serviceCode</stringProp>
                  <stringProp name="-1928370289">serviceType</stringProp>
                  <stringProp name="-1191549461">serviceAvailabilityId</stringProp>
                  <stringProp name="-1606244218">paxIdToSellService</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="19538476">
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Pax to sell sevices" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">//var servicesToSell = JSON.parse(vars.get(&quot;servicesToSell&quot;));
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxesToSellServices = servicesToSell.itemsToSell.length;
vars.put(&quot;paxesToSellServices&quot;, paxesToSellServices);
vars.put(&quot;paxToSellServicesIndex&quot;, 1);
log.info(&quot;&apos;pax to sell sevices&apos; script evaluated correctly. Total pax to be processed: &quot; + paxesToSellServices);
//SampleResult.setIgnore();</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach pax" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${paxToSellServicesIndex} &lt;= ${paxesToSellServices})}</stringProp>
              </WhileController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] services to sell for currentPax" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxToSellServicesIndex = ${paxToSellServicesIndex} - 1;
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var servicesToSellForCurrentPax = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes.length;
vars.put(&quot;servicesToSellForCurrentPax&quot;,servicesToSellForCurrentPax);
vars.put(&quot;servicesForPaxToSellIndex&quot;,1);
log.info(&quot;&apos;services to sell for currentPax&apos; script evaluated correctly. Total services: &quot;+servicesToSellForCurrentPax);
//SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach service to sell" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(${servicesForPaxToSellIndex} &lt;= ${servicesToSellForCurrentPax})}</stringProp>
                </WhileController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Service request values extractor" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var pricedServices = JSON.parse(&apos;${pricedServices}&apos;);
var booking = JSON.parse(&apos;${booking}&apos;);
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;,10) - 1;
var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;,10) - 1;

var currentServiceCodeToSell = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes[servicesForPaxToSellIndex];
var paxNumber = servicesToSell.itemsToSell[paxToSellServicesIndex].paxNumber;
var paxIdToSellService = booking.pax[paxNumber].id;

for(var i=0;i&lt;pricedServices.length;i++)
{
	if(pricedServices[i].info.code == currentServiceCodeToSell)
	{
    		var serviceAvailabilityId = pricedServices[i].availability[0].sellKey; // TODO: First segmnent only?
    
		vars.put(&quot;serviceId&quot;,pricedServices[i].id);
		vars.put(&quot;serviceCode&quot;,currentServiceCodeToSell);
		vars.put(&quot;serviceType&quot;,pricedServices[i].info.type);
		vars.put(&quot;serviceAvailabilityId&quot;,serviceAvailabilityId);
		vars.put(&quot;paxIdToSellService&quot;,paxIdToSellService);
		log.info(&quot;&apos;Service request values extractor&apos; script evaluated correctly. Detected service: &quot;+currentServiceCodeToSell+ &quot; for pax &quot; + paxIdToSellService);		
	}
}
//SampleResult.setIgnore();</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] add service" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;services&quot;: [&#xd;
    {&#xd;
      &quot;serviceSellKey&quot;: &quot;${serviceId}&quot;,&#xd;
      &quot;code&quot;: &quot;${serviceCode}&quot;,&#xd;
      &quot;type&quot;: &quot;${serviceType}&quot;,&#xd;
      &quot;paxId&quot;: &quot;${paxIdToSellService}&quot;,&#xd;
      &quot;sellKey&quot;: &quot;${serviceAvailabilityId}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${servicesDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${servicesPath}/api/v1/service</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${ServicesApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="serviceSellIndex increment" enabled="true">
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">var serviceSellIndex = parseInt(&quot;${serviceSellIndex}&quot;, 10);
serviceSellIndex = serviceSellIndex + 1;
vars.put(&quot;serviceSellIndex&quot;, serviceSellIndex);</stringProp>
                      <stringProp name="scriptLanguage">javascript</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] servicesForPaxToSellIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;, 10);
servicesForPaxToSellIndex = servicesForPaxToSellIndex + 1;
vars.put(&apos;servicesForPaxToSellIndex&apos;, servicesForPaxToSellIndex);
log.info(&quot;&apos;servicesForPaxToSellIndex increment&apos; script evaluated correctly. New index value:&quot;+servicesForPaxToSellIndex);
//SampleResult.setIgnore();</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET]  paxToSellServicesIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;, 10);
paxToSellServicesIndex = paxToSellServicesIndex + 1;
vars.put(&apos;paxToSellServicesIndex&apos;, paxToSellServicesIndex);
log.info(&quot;&apos;paxToSellServicesIndex increment&apos; script evaluated correctly. New index value:&quot;+paxToSellServicesIndex);
//SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] availablemethods" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/availablemethods</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF NOT PSS PRO" enabled="true">
              <stringProp name="IfController.condition">&quot;${Is_PSS_PRO}&quot; == &quot;false&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Selection" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MC Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;MC&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment MC" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${MC_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;MC&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VI Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VI&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VI" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;VI&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AX Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;AX&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment AX" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${AX_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;1234&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;AX&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DS Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;DS&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment DS" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${DS_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;DS&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sberbank Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SBERBANK&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SBERBANK" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/external?Type=PrePaid&amp;Method=${paymentMethod}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paymentUrl Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">paymentUrl</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${paymentUrl}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="OrderId Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">orderId</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;orderId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="bindingId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">bindingId</stringProp>
                        </elementProp>
                        <elementProp name="orderId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">orderId</stringProp>
                        </elementProp>
                        <elementProp name="language" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EN</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">language</stringProp>
                        </elementProp>
                        <elementProp name="card-number" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111   1111   1111   1111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">card-number</stringProp>
                        </elementProp>
                        <elementProp name="pan" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111111111111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pan</stringProp>
                        </elementProp>
                        <elementProp name="month" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">month</stringProp>
                        </elementProp>
                        <elementProp name="year" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2024</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">year</stringProp>
                        </elementProp>
                        <elementProp name="cardholderName" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">asdas asdad</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cardholderName</stringProp>
                        </elementProp>
                        <elementProp name="cvc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cvc</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${paymentUrl}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKey Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKey</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaReq&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaReq" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKey}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaReq</stringProp>
                        </elementProp>
                        <elementProp name="TermUrl" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${SBERBANK_dns}/ab/rest/finish3ds.do?lang</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TermUrl</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">640</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authorizedSecurityCodeForPayment Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authorizedSecurityCodeForPayment</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;acctId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="acctId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${authorizedSecurityCodeForPayment}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">acctId</stringProp>
                        </elementProp>
                        <elementProp name="password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12345678</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">53</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKeyResponse Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKeyResponse</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaRes&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaRes" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKeyResponse}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaRes</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/rest/finish3ds.do?lang=en</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1355631740">Operation declined. Please check the data and available balance of the card.</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SADAD Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SADAD&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SADAD" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&quot;holder&quot;:&quot;SADAD&quot;,&quot;number&quot;:&quot;0000000000000000&quot;,&quot;verifyCode&quot;:&quot;000&quot;,&quot;expirationMonth&quot;:&quot;7&quot;,&quot;expirationYear&quot;:&quot;2021&quot;,&quot;method&quot;:&quot;SD&quot;,&quot;collectedCurrencyCode&quot;:&quot;&quot;,&quot;DccStatus&quot;:&quot;NotOffered&quot;,&quot;type&quot;:&quot;CreditCard&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="V1 Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;V1&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment V1" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;V1&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VO Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VO&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VO" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${voucherNumber}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/voucher</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If booking is not confirmed" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookingStatus}&quot; != &quot;Confirmed&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Payment Validates OK" enabled="true">
                <stringProp name="IfController.condition">${isPaymentOk}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paxId;paxId2</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id;$.booking.pax[1].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA;NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bookingStatus extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">bookingStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If record locator, then" enabled="true">
                  <stringProp name="IfController.condition">&quot;${recordLocator}&quot; != &quot;NO_DATA&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldValidatePaymentExternally" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldValidatePaymentExternally}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] payment" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;PaymentId&quot;: &quot;${paymentId}&quot;&#xd;
}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                      <stringProp name="HTTPSampler.method">PATCH</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldWaitUntilPaymentIsApproved" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldWaitUntilPaymentIsApproved}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While not Approved" enabled="true">
                      <stringProp name="WhileController.condition">${__javaScript(&quot;${isPaymentApproved}&quot; != &quot;Approved&quot;)} </stringProp>
                    </WhileController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has pax" enabled="false">
                          <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                          <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                          <boolProp name="JSONVALIDATION">true</boolProp>
                          <boolProp name="EXPECT_NULL">false</boolProp>
                          <boolProp name="INVERT">false</boolProp>
                          <boolProp name="ISREGEX">false</boolProp>
                        </JSONPathAssertion>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentApproved" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">isPaymentApproved</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$..payments..status</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Etickets required" enabled="true">
                    <stringProp name="IfController.condition">&quot;${EticketsGenerationRequired}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] etickets generation" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/etickets</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldBookingBeConfirmed" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldBookingBeConfirmed}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var productClass = vars.get(&quot;expectedoutboundProductClass&quot;);
var countADT = 0;
var countINF = 0;
var countCHD = 0;
var countBAG25 = 0;
var countBAG15 = 0;

if (booking.bookingInfo.status != &apos;Confirmed&apos;){
	assertFail(&apos;Booking confirmed is failed&apos;);		
}
if (booking.journeys.length !=  ${expectedJourneysCount}){
	assertFail(&apos;Booking has journey failed&apos;);	
}
if (booking.pax.length != ${expectedPaxCount}) {
	assertFail(&apos;Booking has pax failed&apos;);	
}

for (var i = 0; i &lt; booking.pax.length; i++){
	if (booking.pax[i].type.code == &apos;ADT&apos;){
		countADT++;			
	  }	
	if (booking.pax[i].type.code == &apos;INF&apos;){
		countINF++;			
	  }	
	if (booking.pax[i].type.code == &apos;CHD&apos;){
		countCHD++;			
	  }		  
}

if (countADT != ${expectedPaxAdultCount}) {
	assertFail(&apos;Booking has adult pax failed&apos;);	
}
if (countINF != ${expectedPaxInfantCount}) {
	assertFail(&apos;Booking has infant pax failed&apos;);	
}
if (countCHD != ${expectedPaxChildCount}) {
	assertFail(&apos;Booking has child pax failed&apos;);	
}

if (booking.journeys[0].fares[0].productClass != productClass) {
	assertFail(&apos;Booking has fly failed&apos;);	
}

for (var i = 0; i &lt; booking.services.length; i++){	
	if (booking.services[i].type == &apos;Baggage&apos; &amp;&amp; booking.services[i].code == &apos;XP25&apos;){
		countBAG25++;				
     }	
	if (booking.services[i].type == &apos;Baggage&apos; &amp;&amp; booking.services[i].code == &apos;XP15&apos;){
		countBAG15++;				
	}	
 }	    		


if (countBAG25 != ${expectedPaxBaggage25Count} ){
	assertFail(&apos;Booking has baggage 25k failed&apos;);
}
if (countBAG15 != ${expectedPaxBaggage15Count} ){
	assertFail(&apos;Booking has baggage 15k failed&apos;);
}

function assertFail(messageError){
	 AssertionResult.setFailureMessage(messageError);
	 AssertionResult.setFailure(true);	 		
}



	</stringProp>
                        <stringProp name="scriptLanguage">javascript</stringProp>
                      </JSR223Assertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF9 - Meals" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Meal&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT 1XMEAL VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;AVML\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-21&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxMealCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  3ADT 1XMEAL VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;AVML\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-22&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxMealCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT 1CHD 1INF 2XMEALS  VISA-NO-3DS" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;AVML\&quot;,\&quot;BBML\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 1);
vars.put(&quot;expectedPaxMealCount&quot;, 2);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW  3ADT  2CHD 1INF 2XMEALS VISA-NO-3DS" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;2&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;2&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;AVML\&quot;,\&quot;BBML\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 7);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 2);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 2);
vars.put(&quot;expectedPaxMealCount&quot;, 2);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] contacts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;contacts&quot;:[&#xd;
      {&#xd;
         &quot;id&quot;:&quot;&quot;,&#xd;
         &quot;mktOption&quot;:false,&#xd;
         &quot;name&quot;:{&#xd;
            &quot;title&quot;:&quot;MR&quot;,&#xd;
            &quot;first&quot;:&quot;contactname&quot;,&#xd;
            &quot;last&quot;:&quot;contactlastname&quot;&#xd;
         },&#xd;
         &quot;address&quot;:{&#xd;
            &quot;addressLine&quot;:&quot;street&quot;,&#xd;
            &quot;city&quot;:&quot; baltimore&quot;,&#xd;
            &quot;country&quot;:&quot;US&quot;,&#xd;
            &quot;zipCode&quot;:&quot;12312&quot;,&#xd;
            &quot;province&quot;:&quot;AZ&quot;&#xd;
            &#xd;
         },&#xd;
         &quot;channels&quot;:[&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Email&quot;,&#xd;
               &quot;info&quot;:&quot;juan.martinez@newshore.es&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Phone&quot;,&#xd;
               &quot;info&quot;:&quot;123123123&quot;,&#xd;
               &quot;prefix&quot;:&quot;1&quot;&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${contactsDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${contactsPath}/api/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${ContactsApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Booking Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] services" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;serviceTypes&quot;:${AvailableServices}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/services</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${PricingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pricedServices" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pricedServices</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.services</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_SERVICE</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SELL SERVICES" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic vars" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1474422496">paxesToSellServices</stringProp>
                  <stringProp name="737251200">paxToSellServicesIndex</stringProp>
                  <stringProp name="453212524">servicesToSellForCurrentPax</stringProp>
                  <stringProp name="1565339049">servicesForPaxToSellIndex</stringProp>
                  <stringProp name="-194185552">serviceId</stringProp>
                  <stringProp name="-1928886718">serviceCode</stringProp>
                  <stringProp name="-1928370289">serviceType</stringProp>
                  <stringProp name="-1191549461">serviceAvailabilityId</stringProp>
                  <stringProp name="-1606244218">paxIdToSellService</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="19538476">
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Pax to sell sevices" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">//var servicesToSell = JSON.parse(vars.get(&quot;servicesToSell&quot;));
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxesToSellServices = servicesToSell.itemsToSell.length;
vars.put(&quot;paxesToSellServices&quot;, paxesToSellServices);
vars.put(&quot;paxToSellServicesIndex&quot;, 1);
log.info(&quot;&apos;pax to sell sevices&apos; script evaluated correctly. Total pax to be processed: &quot; + paxesToSellServices);
//SampleResult.setIgnore();</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach pax" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${paxToSellServicesIndex} &lt;= ${paxesToSellServices})}</stringProp>
              </WhileController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] services to sell for currentPax" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxToSellServicesIndex = ${paxToSellServicesIndex} - 1;
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var servicesToSellForCurrentPax = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes.length;
vars.put(&quot;servicesToSellForCurrentPax&quot;,servicesToSellForCurrentPax);
vars.put(&quot;servicesForPaxToSellIndex&quot;,1);
log.info(&quot;&apos;services to sell for currentPax&apos; script evaluated correctly. Total services: &quot;+servicesToSellForCurrentPax);
//SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach service to sell" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(${servicesForPaxToSellIndex} &lt;= ${servicesToSellForCurrentPax})}</stringProp>
                </WhileController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Service request values extractor" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var pricedServices = JSON.parse(&apos;${pricedServices}&apos;);
var booking = JSON.parse(&apos;${booking}&apos;);
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;,10) - 1;
var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;,10) - 1;

var currentServiceCodeToSell = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes[servicesForPaxToSellIndex];
var paxNumber = servicesToSell.itemsToSell[paxToSellServicesIndex].paxNumber;
var paxIdToSellService = booking.pax[paxNumber].id;

for(var i=0;i&lt;pricedServices.length;i++)
{
	if(pricedServices[i].info.code == currentServiceCodeToSell)
	{
    		var serviceAvailabilityId = pricedServices[i].availability[0].sellKey; // TODO: First segmnent only?
    
		vars.put(&quot;serviceId&quot;,pricedServices[i].id);
		vars.put(&quot;serviceCode&quot;,currentServiceCodeToSell);
		vars.put(&quot;serviceType&quot;,pricedServices[i].info.type);
		vars.put(&quot;serviceAvailabilityId&quot;,serviceAvailabilityId);
		vars.put(&quot;paxIdToSellService&quot;,paxIdToSellService);
		log.info(&quot;&apos;Service request values extractor&apos; script evaluated correctly. Detected service: &quot;+currentServiceCodeToSell+ &quot; for pax &quot; + paxIdToSellService);		
	}
}
//SampleResult.setIgnore();</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] add service" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;services&quot;: [&#xd;
    {&#xd;
      &quot;serviceSellKey&quot;: &quot;${serviceId}&quot;,&#xd;
      &quot;code&quot;: &quot;${serviceCode}&quot;,&#xd;
      &quot;type&quot;: &quot;${serviceType}&quot;,&#xd;
      &quot;paxId&quot;: &quot;${paxIdToSellService}&quot;,&#xd;
      &quot;sellKey&quot;: &quot;${serviceAvailabilityId}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${servicesDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${servicesPath}/api/v1/service</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${ServicesApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="serviceSellIndex increment" enabled="true">
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">var serviceSellIndex = parseInt(&quot;${serviceSellIndex}&quot;, 10);
serviceSellIndex = serviceSellIndex + 1;
vars.put(&quot;serviceSellIndex&quot;, serviceSellIndex);</stringProp>
                      <stringProp name="scriptLanguage">javascript</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] servicesForPaxToSellIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;, 10);
servicesForPaxToSellIndex = servicesForPaxToSellIndex + 1;
vars.put(&apos;servicesForPaxToSellIndex&apos;, servicesForPaxToSellIndex);
log.info(&quot;&apos;servicesForPaxToSellIndex increment&apos; script evaluated correctly. New index value:&quot;+servicesForPaxToSellIndex);
//SampleResult.setIgnore();</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET]  paxToSellServicesIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;, 10);
paxToSellServicesIndex = paxToSellServicesIndex + 1;
vars.put(&apos;paxToSellServicesIndex&apos;, paxToSellServicesIndex);
log.info(&quot;&apos;paxToSellServicesIndex increment&apos; script evaluated correctly. New index value:&quot;+paxToSellServicesIndex);
//SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] availablemethods" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/availablemethods</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF NOT PSS PRO" enabled="true">
              <stringProp name="IfController.condition">&quot;${Is_PSS_PRO}&quot; == &quot;false&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Selection" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MC Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;MC&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment MC" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${MC_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;MC&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VI Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VI&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VI" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;VI&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AX Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;AX&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment AX" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${AX_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;1234&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;AX&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DS Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;DS&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment DS" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${DS_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;DS&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sberbank Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SBERBANK&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SBERBANK" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/external?Type=PrePaid&amp;Method=${paymentMethod}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paymentUrl Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">paymentUrl</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${paymentUrl}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="OrderId Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">orderId</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;orderId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="bindingId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">bindingId</stringProp>
                        </elementProp>
                        <elementProp name="orderId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">orderId</stringProp>
                        </elementProp>
                        <elementProp name="language" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EN</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">language</stringProp>
                        </elementProp>
                        <elementProp name="card-number" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111   1111   1111   1111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">card-number</stringProp>
                        </elementProp>
                        <elementProp name="pan" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111111111111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pan</stringProp>
                        </elementProp>
                        <elementProp name="month" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">month</stringProp>
                        </elementProp>
                        <elementProp name="year" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2024</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">year</stringProp>
                        </elementProp>
                        <elementProp name="cardholderName" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">asdas asdad</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cardholderName</stringProp>
                        </elementProp>
                        <elementProp name="cvc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cvc</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${paymentUrl}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKey Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKey</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaReq&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaReq" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKey}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaReq</stringProp>
                        </elementProp>
                        <elementProp name="TermUrl" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${SBERBANK_dns}/ab/rest/finish3ds.do?lang</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TermUrl</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">640</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authorizedSecurityCodeForPayment Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authorizedSecurityCodeForPayment</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;acctId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="acctId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${authorizedSecurityCodeForPayment}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">acctId</stringProp>
                        </elementProp>
                        <elementProp name="password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12345678</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">53</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKeyResponse Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKeyResponse</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaRes&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaRes" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKeyResponse}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaRes</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/rest/finish3ds.do?lang=en</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1355631740">Operation declined. Please check the data and available balance of the card.</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SADAD Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SADAD&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SADAD" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&quot;holder&quot;:&quot;SADAD&quot;,&quot;number&quot;:&quot;0000000000000000&quot;,&quot;verifyCode&quot;:&quot;000&quot;,&quot;expirationMonth&quot;:&quot;7&quot;,&quot;expirationYear&quot;:&quot;2021&quot;,&quot;method&quot;:&quot;SD&quot;,&quot;collectedCurrencyCode&quot;:&quot;&quot;,&quot;DccStatus&quot;:&quot;NotOffered&quot;,&quot;type&quot;:&quot;CreditCard&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="V1 Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;V1&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment V1" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;V1&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VO Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VO&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VO" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${voucherNumber}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/voucher</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If booking is not confirmed" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookingStatus}&quot; != &quot;Confirmed&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Payment Validates OK" enabled="true">
                <stringProp name="IfController.condition">${isPaymentOk}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paxId;paxId2</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id;$.booking.pax[1].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA;NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bookingStatus extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">bookingStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If record locator, then" enabled="true">
                  <stringProp name="IfController.condition">&quot;${recordLocator}&quot; != &quot;NO_DATA&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldValidatePaymentExternally" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldValidatePaymentExternally}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] payment" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;PaymentId&quot;: &quot;${paymentId}&quot;&#xd;
}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                      <stringProp name="HTTPSampler.method">PATCH</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldWaitUntilPaymentIsApproved" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldWaitUntilPaymentIsApproved}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While not Approved" enabled="true">
                      <stringProp name="WhileController.condition">${__javaScript(&quot;${isPaymentApproved}&quot; != &quot;Approved&quot;)} </stringProp>
                    </WhileController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has pax" enabled="false">
                          <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                          <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                          <boolProp name="JSONVALIDATION">true</boolProp>
                          <boolProp name="EXPECT_NULL">false</boolProp>
                          <boolProp name="INVERT">false</boolProp>
                          <boolProp name="ISREGEX">false</boolProp>
                        </JSONPathAssertion>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentApproved" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">isPaymentApproved</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$..payments..status</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Etickets required" enabled="true">
                    <stringProp name="IfController.condition">&quot;${EticketsGenerationRequired}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] etickets generation" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/etickets</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldBookingBeConfirmed" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldBookingBeConfirmed}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var productClass = vars.get(&quot;expectedoutboundProductClass&quot;);
var countADT = 0;
var countINF = 0;
var countCHD = 0;
var countMeal = 0;

if (booking.bookingInfo.status != &apos;Confirmed&apos;){
	assertFail(&apos;Booking confirmed is failed&apos;);		
}
if (booking.journeys.length !=  ${expectedJourneysCount}){
	assertFail(&apos;Booking has journey failed&apos;);	
}
if (booking.pax.length != ${expectedPaxCount}) {
	assertFail(&apos;Booking has pax failed&apos;);	
}

for (var i = 0; i &lt; booking.pax.length; i++){
	if (booking.pax[i].type.code == &apos;ADT&apos;){
		countADT++;			
	  }	
	if (booking.pax[i].type.code == &apos;INF&apos;){
		countINF++;			
	  }	
	if (booking.pax[i].type.code == &apos;CHD&apos;){
		countCHD++;			
	  }		  
}

if (countADT != ${expectedPaxAdultCount}) {
	assertFail(&apos;Booking has adult pax failed&apos;);	
}
if (countINF != ${expectedPaxInfantCount}) {
	assertFail(&apos;Booking has infant pax failed&apos;);	
}
if (countCHD != ${expectedPaxChildCount}) {
	assertFail(&apos;Booking has child pax failed&apos;);	
}

if (booking.journeys[0].fares[0].productClass != productClass) {
	assertFail(&apos;Booking has fly failed&apos;);	
}

for (var i = 0; i &lt; booking.services.length; i++){	
	if (booking.services[i].type == &apos;Meal&apos;){
		countMeal++;			
     }		
 }	    		


if (countMeal != ${expectedPaxMealCount} ){
	assertFail(&apos;Booking has meal failed&apos;);
}

function assertFail(messageError){
	 AssertionResult.setFailureMessage(messageError);
	 AssertionResult.setFailure(true);	 		
}



	</stringProp>
                        <stringProp name="scriptLanguage">javascript</stringProp>
                      </JSR223Assertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BF10: Special Assistance" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Meal&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT 1 ADT - WCHR - PAID" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;WCHR\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-21&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 1);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxSpecialAssistanceCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW 3 ADT - PRNG - PAID" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;PRGN\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-22&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 0);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 0);
vars.put(&quot;expectedPaxSpecialAssistanceCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT 1 ADT + 1 CHD + 1 INF - BLND - PAID" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;1&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;BLND\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 3);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 1);
vars.put(&quot;expectedPaxAdultCount&quot;, 1);
vars.put(&quot;expectedPaxInfantCount&quot;, 1);
vars.put(&quot;expectedPaxSpecialAssistanceCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] OW 3 ADT +2 CHD + 2 INF - DEAF - PAID" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;2&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;2&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;DEAF\&quot;]}]}&quot;);

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 7);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 1);
vars.put(&quot;expectedPaxChildCount&quot;, 2);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 2);
vars.put(&quot;expectedPaxSpecialAssistanceCount&quot;, 1);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT 3 ADT +2 CHD + 2 INF - WCHR+PRNG+BLAND+DEAF - PAID" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);
vars.put(&quot;returnDate&quot;,&quot;${defaultReturnDate}&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);
vars.put(&quot;adultsNumber&quot;,&quot;3&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;2&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;2&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;0\&quot;,\&quot;serviceCodes\&quot;:[\&quot;WCHR\&quot;,\&quot;PRGN\&quot;,\&quot;BLND\&quot;,\&quot;DEAF\&quot;]}]}&quot;);


vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-06-20&quot;);
SampleResult.setIgnore()

//Expectations
vars.put(&quot;expectedPaxCount&quot;, 7);
vars.put(&quot;ShouldBookingBeConfirmed&quot;, true);
vars.put(&quot;expectedJourneysCount&quot;, 2);
vars.put(&quot;expectedPaxChildCount&quot;, 2);
vars.put(&quot;expectedPaxAdultCount&quot;, 3);
vars.put(&quot;expectedPaxInfantCount&quot;, 2);
vars.put(&quot;expectedPaxSpecialAssistanceCount&quot;, 4);
vars.put(&quot;expectedoutboundProductClass&quot;, &quot;YA&quot;);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] contacts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;contacts&quot;:[&#xd;
      {&#xd;
         &quot;id&quot;:&quot;&quot;,&#xd;
         &quot;mktOption&quot;:false,&#xd;
         &quot;name&quot;:{&#xd;
            &quot;title&quot;:&quot;MR&quot;,&#xd;
            &quot;first&quot;:&quot;contactname&quot;,&#xd;
            &quot;last&quot;:&quot;contactlastname&quot;&#xd;
         },&#xd;
         &quot;address&quot;:{&#xd;
            &quot;addressLine&quot;:&quot;street&quot;,&#xd;
            &quot;city&quot;:&quot; baltimore&quot;,&#xd;
            &quot;country&quot;:&quot;US&quot;,&#xd;
            &quot;zipCode&quot;:&quot;12312&quot;,&#xd;
            &quot;province&quot;:&quot;AZ&quot;&#xd;
            &#xd;
         },&#xd;
         &quot;channels&quot;:[&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Email&quot;,&#xd;
               &quot;info&quot;:&quot;juan.martinez@newshore.es&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Phone&quot;,&#xd;
               &quot;info&quot;:&quot;123123123&quot;,&#xd;
               &quot;prefix&quot;:&quot;1&quot;&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${contactsDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${contactsPath}/api/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${ContactsApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Booking Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] services" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;serviceTypes&quot;:${AvailableServices}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/services</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${PricingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pricedServices" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pricedServices</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.services</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_SERVICE</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SELL SERVICES" enabled="true"/>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic vars" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1474422496">paxesToSellServices</stringProp>
                  <stringProp name="737251200">paxToSellServicesIndex</stringProp>
                  <stringProp name="453212524">servicesToSellForCurrentPax</stringProp>
                  <stringProp name="1565339049">servicesForPaxToSellIndex</stringProp>
                  <stringProp name="-194185552">serviceId</stringProp>
                  <stringProp name="-1928886718">serviceCode</stringProp>
                  <stringProp name="-1928370289">serviceType</stringProp>
                  <stringProp name="-1191549461">serviceAvailabilityId</stringProp>
                  <stringProp name="-1606244218">paxIdToSellService</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="19538476">
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Pax to sell sevices" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">//var servicesToSell = JSON.parse(vars.get(&quot;servicesToSell&quot;));
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxesToSellServices = servicesToSell.itemsToSell.length;
vars.put(&quot;paxesToSellServices&quot;, paxesToSellServices);
vars.put(&quot;paxToSellServicesIndex&quot;, 1);
log.info(&quot;&apos;pax to sell sevices&apos; script evaluated correctly. Total pax to be processed: &quot; + paxesToSellServices);
//SampleResult.setIgnore();</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach pax" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${paxToSellServicesIndex} &lt;= ${paxesToSellServices})}</stringProp>
              </WhileController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] services to sell for currentPax" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxToSellServicesIndex = ${paxToSellServicesIndex} - 1;
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var servicesToSellForCurrentPax = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes.length;
vars.put(&quot;servicesToSellForCurrentPax&quot;,servicesToSellForCurrentPax);
vars.put(&quot;servicesForPaxToSellIndex&quot;,1);
log.info(&quot;&apos;services to sell for currentPax&apos; script evaluated correctly. Total services: &quot;+servicesToSellForCurrentPax);
//SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach service to sell" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(${servicesForPaxToSellIndex} &lt;= ${servicesToSellForCurrentPax})}</stringProp>
                </WhileController>
                <hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Service request values extractor" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var pricedServices = JSON.parse(&apos;${pricedServices}&apos;);
var booking = JSON.parse(&apos;${booking}&apos;);
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;,10) - 1;
var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;,10) - 1;

var currentServiceCodeToSell = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes[servicesForPaxToSellIndex];
var paxNumber = servicesToSell.itemsToSell[paxToSellServicesIndex].paxNumber;
var paxIdToSellService = booking.pax[paxNumber].id;

for(var i=0;i&lt;pricedServices.length;i++)
{
	if(pricedServices[i].info.code == currentServiceCodeToSell)
	{
    		var serviceAvailabilityId = pricedServices[i].availability[0].sellKey; // TODO: First segmnent only?
    
		vars.put(&quot;serviceId&quot;,pricedServices[i].id);
		vars.put(&quot;serviceCode&quot;,currentServiceCodeToSell);
		vars.put(&quot;serviceType&quot;,pricedServices[i].info.type);
		vars.put(&quot;serviceAvailabilityId&quot;,serviceAvailabilityId);
		vars.put(&quot;paxIdToSellService&quot;,paxIdToSellService);
		log.info(&quot;&apos;Service request values extractor&apos; script evaluated correctly. Detected service: &quot;+currentServiceCodeToSell+ &quot; for pax &quot; + paxIdToSellService);		
	}
}
//SampleResult.setIgnore();</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] add service" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
  &quot;services&quot;: [&#xd;
    {&#xd;
      &quot;serviceSellKey&quot;: &quot;${serviceId}&quot;,&#xd;
      &quot;code&quot;: &quot;${serviceCode}&quot;,&#xd;
      &quot;type&quot;: &quot;${serviceType}&quot;,&#xd;
      &quot;paxId&quot;: &quot;${paxIdToSellService}&quot;,&#xd;
      &quot;sellKey&quot;: &quot;${serviceAvailabilityId}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${servicesDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${servicesPath}/api/v1/service</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${ServicesApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="serviceSellIndex increment" enabled="true">
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">var serviceSellIndex = parseInt(&quot;${serviceSellIndex}&quot;, 10);
serviceSellIndex = serviceSellIndex + 1;
vars.put(&quot;serviceSellIndex&quot;, serviceSellIndex);</stringProp>
                      <stringProp name="scriptLanguage">javascript</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] servicesForPaxToSellIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;, 10);
servicesForPaxToSellIndex = servicesForPaxToSellIndex + 1;
vars.put(&apos;servicesForPaxToSellIndex&apos;, servicesForPaxToSellIndex);
log.info(&quot;&apos;servicesForPaxToSellIndex increment&apos; script evaluated correctly. New index value:&quot;+servicesForPaxToSellIndex);
//SampleResult.setIgnore();</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223Sampler>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET]  paxToSellServicesIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;, 10);
paxToSellServicesIndex = paxToSellServicesIndex + 1;
vars.put(&apos;paxToSellServicesIndex&apos;, paxToSellServicesIndex);
log.info(&quot;&apos;paxToSellServicesIndex increment&apos; script evaluated correctly. New index value:&quot;+paxToSellServicesIndex);
//SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] availablemethods" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/availablemethods</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF NOT PSS PRO" enabled="true">
              <stringProp name="IfController.condition">&quot;${Is_PSS_PRO}&quot; == &quot;false&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Selection" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MC Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;MC&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment MC" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${MC_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;MC&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VI Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VI&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VI" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;VI&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AX Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;AX&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment AX" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${AX_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;1234&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;AX&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DS Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;DS&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment DS" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${DS_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;DS&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sberbank Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SBERBANK&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SBERBANK" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/external?Type=PrePaid&amp;Method=${paymentMethod}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paymentUrl Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">paymentUrl</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${paymentUrl}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="OrderId Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">orderId</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;orderId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="bindingId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">bindingId</stringProp>
                        </elementProp>
                        <elementProp name="orderId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">orderId</stringProp>
                        </elementProp>
                        <elementProp name="language" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EN</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">language</stringProp>
                        </elementProp>
                        <elementProp name="card-number" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111   1111   1111   1111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">card-number</stringProp>
                        </elementProp>
                        <elementProp name="pan" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111111111111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pan</stringProp>
                        </elementProp>
                        <elementProp name="month" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">month</stringProp>
                        </elementProp>
                        <elementProp name="year" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2024</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">year</stringProp>
                        </elementProp>
                        <elementProp name="cardholderName" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">asdas asdad</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cardholderName</stringProp>
                        </elementProp>
                        <elementProp name="cvc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cvc</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${paymentUrl}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKey Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKey</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaReq&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaReq" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKey}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaReq</stringProp>
                        </elementProp>
                        <elementProp name="TermUrl" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${SBERBANK_dns}/ab/rest/finish3ds.do?lang</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TermUrl</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">640</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authorizedSecurityCodeForPayment Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authorizedSecurityCodeForPayment</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;acctId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="acctId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${authorizedSecurityCodeForPayment}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">acctId</stringProp>
                        </elementProp>
                        <elementProp name="password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12345678</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">53</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKeyResponse Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKeyResponse</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaRes&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaRes" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKeyResponse}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaRes</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/rest/finish3ds.do?lang=en</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1355631740">Operation declined. Please check the data and available balance of the card.</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SADAD Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SADAD&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SADAD" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&quot;holder&quot;:&quot;SADAD&quot;,&quot;number&quot;:&quot;0000000000000000&quot;,&quot;verifyCode&quot;:&quot;000&quot;,&quot;expirationMonth&quot;:&quot;7&quot;,&quot;expirationYear&quot;:&quot;2021&quot;,&quot;method&quot;:&quot;SD&quot;,&quot;collectedCurrencyCode&quot;:&quot;&quot;,&quot;DccStatus&quot;:&quot;NotOffered&quot;,&quot;type&quot;:&quot;CreditCard&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="V1 Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;V1&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment V1" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;V1&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VO Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VO&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VO" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${voucherNumber}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/voucher</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If booking is not confirmed" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookingStatus}&quot; != &quot;Confirmed&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Payment Validates OK" enabled="true">
                <stringProp name="IfController.condition">${isPaymentOk}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paxId;paxId2</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id;$.booking.pax[1].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA;NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bookingStatus extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">bookingStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If record locator, then" enabled="true">
                  <stringProp name="IfController.condition">&quot;${recordLocator}&quot; != &quot;NO_DATA&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldValidatePaymentExternally" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldValidatePaymentExternally}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] payment" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;PaymentId&quot;: &quot;${paymentId}&quot;&#xd;
}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                      <stringProp name="HTTPSampler.method">PATCH</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldWaitUntilPaymentIsApproved" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldWaitUntilPaymentIsApproved}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While not Approved" enabled="true">
                      <stringProp name="WhileController.condition">${__javaScript(&quot;${isPaymentApproved}&quot; != &quot;Approved&quot;)} </stringProp>
                    </WhileController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking has pax" enabled="false">
                          <stringProp name="JSON_PATH">$.booking.pax.size()</stringProp>
                          <stringProp name="EXPECTED_VALUE">${expectedPaxCount}</stringProp>
                          <boolProp name="JSONVALIDATION">true</boolProp>
                          <boolProp name="EXPECT_NULL">false</boolProp>
                          <boolProp name="INVERT">false</boolProp>
                          <boolProp name="ISREGEX">false</boolProp>
                        </JSONPathAssertion>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentApproved" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">isPaymentApproved</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$..payments..status</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Etickets required" enabled="true">
                    <stringProp name="IfController.condition">&quot;${EticketsGenerationRequired}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] etickets generation" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/etickets</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldBookingBeConfirmed" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldBookingBeConfirmed}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                        <stringProp name="cacheKey">true</stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var productClass = vars.get(&quot;expectedoutboundProductClass&quot;);
var countADT = 0;
var countINF = 0;
var countCHD = 0;
var countMeal = 0;

if (booking.bookingInfo.status != &apos;Confirmed&apos;){
	assertFail(&apos;Booking confirmed is failed&apos;);		
}
if (booking.journeys.length !=  ${expectedJourneysCount}){
	assertFail(&apos;Booking has journey failed&apos;);	
}
if (booking.pax.length != ${expectedPaxCount}) {
	assertFail(&apos;Booking has pax failed&apos;);	
}

for (var i = 0; i &lt; booking.pax.length; i++){
	if (booking.pax[i].type.code == &apos;ADT&apos;){
		countADT++;			
	  }	
	if (booking.pax[i].type.code == &apos;INF&apos;){
		countINF++;			
	  }	
	if (booking.pax[i].type.code == &apos;CHD&apos;){
		countCHD++;			
	  }		  
}

if (countADT != ${expectedPaxAdultCount}) {
	assertFail(&apos;Booking has adult pax failed&apos;);	
}
if (countINF != ${expectedPaxInfantCount}) {
	assertFail(&apos;Booking has infant pax failed&apos;);	
}
if (countCHD != ${expectedPaxChildCount}) {
	assertFail(&apos;Booking has child pax failed&apos;);	
}

if (booking.journeys[0].fares[0].productClass != productClass) {
	assertFail(&apos;Booking has fly failed&apos;);	
}

for (var i = 0; i &lt; booking.services.length; i++){	
	if (booking.services[i].type == &apos;SpecialAssistance&apos;){
		countMeal++;			
     }		
 }	    		

if (countMeal != ${expectedPaxSpecialAssistanceCount} ){
	assertFail(&apos;Booking has Special Assistance failed&apos;);
}

function assertFail(messageError){
	 AssertionResult.setFailureMessage(messageError);
	 AssertionResult.setFailure(true);	 		
}



	</stringProp>
                        <stringProp name="scriptLanguage">javascript</stringProp>
                      </JSR223Assertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="[DRAFT] BF11- Seatmap" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CONFIG" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV2" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev2.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV4" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV4&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev4.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF UAT" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;UAT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;uat.flyadeal.com&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[TESTCASE] RT  1ADT 1CHD VISA-NO-3DS" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] OneWay" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;${defaultOutboundDate}&quot;);

vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED

vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;1&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;V1&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 

vars.put(&quot;VI_CreditCardNumber&quot;,&quot;4012000033330026&quot;);
vars.put(&quot;outboundDate&quot;,&quot;2021-05-13&quot;);
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXECUTION" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="778434137">adultsIndex</stringProp>
              <stringProp name="783261509">currentAdultReferenceId</stringProp>
              <stringProp name="-1499443219">teenageIndex</stringProp>
              <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
              <stringProp name="1231274515">childrenIndex</stringProp>
              <stringProp name="1203845795">currentChildReferenceId</stringProp>
              <stringProp name="148663813">infantsIndex</stringProp>
              <stringProp name="1609246471">currentInfantReferenceId</stringProp>
              <stringProp name="-2043461269">serviceSellIndex</stringProp>
              <stringProp name="-788668939">paxInfo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1811996734">
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="3938">{}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="recordLocator" elementType="Argument">
                <stringProp name="Argument.name">recordLocator</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentOk" elementType="Argument">
                <stringProp name="Argument.name">isPaymentOk</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outboundDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateBeginWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
                <stringProp name="Argument.value">2019-11-26</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returnDateEndWeekDay" elementType="Argument">
                <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
                <stringProp name="Argument.value">2019-12-02</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paymentRetries" elementType="Argument">
                <stringProp name="Argument.name">paymentRetries</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AdultTypeObject" elementType="Argument">
                <stringProp name="Argument.name">AdultTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ChildTypeObject" elementType="Argument">
                <stringProp name="Argument.name">ChildTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TeenageTypeObject" elementType="Argument">
                <stringProp name="Argument.name">TeenageTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InfantTypeObject" elementType="Argument">
                <stringProp name="Argument.name">InfantTypeObject</stringProp>
                <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="paxCreationRequest" elementType="Argument">
                <stringProp name="Argument.name">paxCreationRequest</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="availabilityRequests" elementType="Argument">
                <stringProp name="Argument.name">availabilityRequests</stringProp>
                <stringProp name="Argument.value">NO_DATA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isPaymentApproved" elementType="Argument">
                <stringProp name="Argument.name">isPaymentApproved</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingStatus" elementType="Argument">
                <stringProp name="Argument.name">bookingStatus</stringProp>
                <stringProp name="Argument.value">Hold</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
            <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="778434137">adultsIndex</stringProp>
                  <stringProp name="783261509">currentAdultReferenceId</stringProp>
                  <stringProp name="-1499443219">teenageIndex</stringProp>
                  <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                  <stringProp name="1231274515">childrenIndex</stringProp>
                  <stringProp name="1203845795">currentChildReferenceId</stringProp>
                  <stringProp name="148663813">infantsIndex</stringProp>
                  <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                  <stringProp name="-2043461269">serviceSellIndex</stringProp>
                  <stringProp name="-788668939">paxInfo</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1811996734">
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="49">1</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="48">0</stringProp>
                    <stringProp name="3938">{}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">true</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2020-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2020-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2020-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2020-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2020-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2020-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2020-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2020-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2020-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2020-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
              </WhileController>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="HasYakeenError" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">HasYakeenError</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.error.code</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_ERROR</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="false">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="false">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF YAKEEN ERROR" enabled="true">
                <stringProp name="IfController.condition">&quot;${HasYakeenError}&quot; == &quot;YakeenDocumentInvalidException&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] contacts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;contacts&quot;:[&#xd;
      {&#xd;
         &quot;id&quot;:&quot;&quot;,&#xd;
         &quot;mktOption&quot;:false,&#xd;
         &quot;name&quot;:{&#xd;
            &quot;title&quot;:&quot;MR&quot;,&#xd;
            &quot;first&quot;:&quot;contactname&quot;,&#xd;
            &quot;last&quot;:&quot;contactlastname&quot;&#xd;
         },&#xd;
         &quot;address&quot;:{&#xd;
            &quot;addressLine&quot;:&quot;street&quot;,&#xd;
            &quot;city&quot;:&quot; baltimore&quot;,&#xd;
            &quot;country&quot;:&quot;US&quot;,&#xd;
            &quot;zipCode&quot;:&quot;12312&quot;,&#xd;
            &quot;province&quot;:&quot;AZ&quot;&#xd;
            &#xd;
         },&#xd;
         &quot;channels&quot;:[&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Email&quot;,&#xd;
               &quot;info&quot;:&quot;juan.martinez@newshore.es&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Phone&quot;,&#xd;
               &quot;info&quot;:&quot;123123123&quot;,&#xd;
               &quot;prefix&quot;:&quot;1&quot;&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${contactsDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${contactsPath}/api/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${ContactsApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="segmentIdOutbound Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">segmentIdOutbound</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.journeys[0].segments[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paxIdToSellSeat Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">paxIdToSellSeat</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] seatmap" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${resourcesDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${resourcesPath}/api/v1/seatmap?segmentId=${segmentIdOutbound}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${ResourcesApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="freeSeat extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">freeSeat</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.type == &apos;Seat&apos;)].seatInfo.availabilityByPax[&quot;${paxIdToSellSeat}&quot;]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] availablemethods" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/availablemethods</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF NOT PSS PRO" enabled="true">
              <stringProp name="IfController.condition">&quot;${Is_PSS_PRO}&quot; == &quot;false&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Selection" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MC Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;MC&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment MC" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${MC_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;MC&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VI Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VI&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VI" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;VI&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AX Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;AX&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment AX" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${AX_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;1234&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;AX&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DS Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;DS&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment DS" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${DS_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;DS&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sberbank Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SBERBANK&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SBERBANK" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/external?Type=PrePaid&amp;Method=${paymentMethod}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paymentUrl Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">paymentUrl</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${paymentUrl}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="OrderId Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">orderId</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;orderId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="bindingId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">bindingId</stringProp>
                        </elementProp>
                        <elementProp name="orderId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">orderId</stringProp>
                        </elementProp>
                        <elementProp name="language" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EN</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">language</stringProp>
                        </elementProp>
                        <elementProp name="card-number" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111   1111   1111   1111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">card-number</stringProp>
                        </elementProp>
                        <elementProp name="pan" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">4111111111111111</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">pan</stringProp>
                        </elementProp>
                        <elementProp name="month" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">month</stringProp>
                        </elementProp>
                        <elementProp name="year" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">2024</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">year</stringProp>
                        </elementProp>
                        <elementProp name="cardholderName" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">asdas asdad</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cardholderName</stringProp>
                        </elementProp>
                        <elementProp name="cvc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">123</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">cvc</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${paymentUrl}</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKey Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKey</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaReq&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaReq" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKey}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaReq</stringProp>
                        </elementProp>
                        <elementProp name="TermUrl" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${SBERBANK_dns}/ab/rest/finish3ds.do?lang</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TermUrl</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">640</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authorizedSecurityCodeForPayment Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authorizedSecurityCodeForPayment</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;acctId&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish auth" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="acctId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${authorizedSecurityCodeForPayment}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">acctId</stringProp>
                        </elementProp>
                        <elementProp name="password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">12345678</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Length" elementType="Header">
                          <stringProp name="Header.name">Content-Length</stringProp>
                          <stringProp name="Header.value">53</stringProp>
                        </elementProp>
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-User" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                          <stringProp name="Header.value">?1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKeyResponse Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">authKeyResponse</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=&apos;PaRes&apos;]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish pay" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="MD" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${orderId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">MD</stringProp>
                        </elementProp>
                        <elementProp name="PaRes" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value">${authKeyResponse}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">PaRes</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/rest/finish3ds.do?lang=en</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Cache-Control" elementType="Header">
                          <stringProp name="Header.name">Cache-Control</stringProp>
                          <stringProp name="Header.value">max-age=0</stringProp>
                        </elementProp>
                        <elementProp name="Origin" elementType="Header">
                          <stringProp name="Header.name">Origin</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                        </elementProp>
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">navigate</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1355631740">Operation declined. Please check the data and available balance of the card.</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">6</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="SADAD Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SADAD&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SADAD" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&quot;holder&quot;:&quot;SADAD&quot;,&quot;number&quot;:&quot;0000000000000000&quot;,&quot;verifyCode&quot;:&quot;000&quot;,&quot;expirationMonth&quot;:&quot;7&quot;,&quot;expirationYear&quot;:&quot;2021&quot;,&quot;method&quot;:&quot;SD&quot;,&quot;collectedCurrencyCode&quot;:&quot;&quot;,&quot;DccStatus&quot;:&quot;NotOffered&quot;,&quot;type&quot;:&quot;CreditCard&quot;}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                      <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                      <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="V1 Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;V1&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment V1" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;5&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2021&quot;,&#xd;
   &quot;method&quot;:&quot;V1&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VO Payment" enabled="true">
                  <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VO&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VO" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${voucherNumber}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/voucher</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If booking is not confirmed" enabled="true">
                <stringProp name="IfController.condition">&quot;${bookingStatus}&quot; != &quot;Confirmed&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Payment Validates OK" enabled="true">
                <stringProp name="IfController.condition">${isPaymentOk}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paxId;paxId2</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id;$.booking.pax[1].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA;NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bookingStatus extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">bookingStatus</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If record locator, then" enabled="true">
                  <stringProp name="IfController.condition">&quot;${recordLocator}&quot; != &quot;NO_DATA&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldValidatePaymentExternally" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldValidatePaymentExternally}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] payment" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;request&quot;:{&#xd;
   &quot;PaymentId&quot;: &quot;${paymentId}&quot;&#xd;
}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/card</stringProp>
                      <stringProp name="HTTPSampler.method">PATCH</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldWaitUntilPaymentIsApproved" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldWaitUntilPaymentIsApproved}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While not Approved" enabled="true">
                      <stringProp name="WhileController.condition">${__javaScript(&quot;${isPaymentApproved}&quot; != &quot;Approved&quot;)} </stringProp>
                    </WhileController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">PUT</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="" elementType="Header">
                              <stringProp name="Header.name">ApiKey</stringProp>
                              <stringProp name="Header.value">${BookingApiKey}</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentApproved" enabled="true">
                          <stringProp name="JSONPostProcessor.referenceNames">isPaymentApproved</stringProp>
                          <stringProp name="JSONPostProcessor.jsonPathExprs">$..payments..status</stringProp>
                          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                          <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                        </JSONPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Etickets required" enabled="true">
                    <stringProp name="IfController.condition">&quot;${EticketsGenerationRequired}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] etickets generation" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/etickets</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldBookingBeConfirmed" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ShouldBookingBeConfirmed}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                        <stringProp name="JSON_PATH">$.success</stringProp>
                        <stringProp name="EXPECTED_VALUE">true</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on confirmed" enabled="true">
                        <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                        <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                        <boolProp name="JSONVALIDATION">true</boolProp>
                        <boolProp name="EXPECT_NULL">false</boolProp>
                        <boolProp name="INVERT">false</boolProp>
                        <boolProp name="ISREGEX">true</boolProp>
                      </JSONPathAssertion>
                      <hashTree/>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="------------------------------" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="[UNDEFINED] BF...N" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${GLOBAL_THREAD_LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${GLOBAL_USERS_PER_THREAD}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${GLOBAL_RAMP_UP_SECONDS}</stringProp>
        <longProp name="ThreadGroup.start_time">1519122861000</longProp>
        <longProp name="ThreadGroup.end_time">1519122861000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${GLOBAL_TEST_DURATION_SECONDS}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CUSTOMER-DATA" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ENVIRONMENT DATA" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingDNS" elementType="Argument">
                <stringProp name="Argument.name">pricingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingDNS" elementType="Argument">
                <stringProp name="Argument.name">bookingDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsDNS" elementType="Argument">
                <stringProp name="Argument.name">contactsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financeDNS" elementType="Argument">
                <stringProp name="Argument.name">financeDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesDNS" elementType="Argument">
                <stringProp name="Argument.name">servicesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesDNS" elementType="Argument">
                <stringProp name="Argument.name">resourcesDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsDNS" elementType="Argument">
                <stringProp name="Argument.name">accountsDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiDNS" elementType="Argument">
                <stringProp name="Argument.name">geoApiDNS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pricingPath" elementType="Argument">
                <stringProp name="Argument.name">pricingPath</stringProp>
                <stringProp name="Argument.value">/pricing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bookingPath" elementType="Argument">
                <stringProp name="Argument.name">bookingPath</stringProp>
                <stringProp name="Argument.value">/booking</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="contactsPath" elementType="Argument">
                <stringProp name="Argument.name">contactsPath</stringProp>
                <stringProp name="Argument.value">/contacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="financePath" elementType="Argument">
                <stringProp name="Argument.name">financePath</stringProp>
                <stringProp name="Argument.value">/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="servicesPath" elementType="Argument">
                <stringProp name="Argument.name">servicesPath</stringProp>
                <stringProp name="Argument.value">/services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="resourcesPath" elementType="Argument">
                <stringProp name="Argument.name">resourcesPath</stringProp>
                <stringProp name="Argument.value">/resources</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="accountsPath" elementType="Argument">
                <stringProp name="Argument.name">accountsPath</stringProp>
                <stringProp name="Argument.value">/accounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="geoApiPath" elementType="Argument">
                <stringProp name="Argument.name">geoApiPath</stringProp>
                <stringProp name="Argument.value">/legacygeoip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PricingApiKey" elementType="Argument">
                <stringProp name="Argument.name">PricingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BookingApiKey" elementType="Argument">
                <stringProp name="Argument.name">BookingApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FinanceApiKey" elementType="Argument">
                <stringProp name="Argument.name">FinanceApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ContactsApiKey" elementType="Argument">
                <stringProp name="Argument.name">ContactsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServicesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ServicesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ResourcesApiKey" elementType="Argument">
                <stringProp name="Argument.name">ResourcesApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="AccountsApiKey" elementType="Argument">
                <stringProp name="Argument.name">AccountsApiKey</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="NS.Booking.PrivateToken" elementType="Argument">
                <stringProp name="Argument.name">NS.Booking.PrivateToken</stringProp>
                <stringProp name="Argument.value">a45a127a83e0efcc8857423c0619d84e0bb4b07ee1856c41b00486d741554e2d</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CustomerId" elementType="Argument">
                <stringProp name="Argument.name">CustomerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_dns" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_dns</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SBERBANK_customerName" elementType="Argument">
                <stringProp name="Argument.name">SBERBANK_customerName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Is_PSS_PRO" elementType="Argument">
                <stringProp name="Argument.name">Is_PSS_PRO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] FLYADEAL environment data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;PricingApiKey&quot;, &quot;d9eaa63c9008987381860a36e0d8c2aa2c6a936b41bf35e42bbe11e97bd452ea&quot;);
vars.put(&quot;BookingApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;FinanceApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ContactsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ServicesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;ResourcesApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;AccountsApiKey&quot;, &quot;3570b7304cf0c3397670581657a6ee0ef72256bcb4c4021be666fd144c8d9f20&quot;);
vars.put(&quot;CustomerId&quot;, &quot;a6cb7100-f956-4952-a660-e646641331b1&quot;);
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF LOCAL" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;LOCAL&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] LOCAL environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-api-local.newshore.es&quot;);
vars.put(&quot;bookingPath&quot;, &quot;&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-pricing-api-local.newshore.es&quot;);
vars.put(&quot;pricingPath&quot;, &quot;&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-contacts-api-local.newshore.es&quot;);
vars.put(&quot;contactsPath&quot;, &quot;&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-finance-api-local.newshore.es&quot;);
vars.put(&quot;financePath&quot;, &quot;&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-services-api-local.newshore.es&quot;);
vars.put(&quot;servicesPath&quot;, &quot;&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-resources-api-local.newshore.es&quot;);
vars.put(&quot;resourcesPath&quot;, &quot;&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-accounts-api-local.newshore.es&quot;);
vars.put(&quot;accountsPath&quot;, &quot;&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF DEV" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;DEV&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] DEV environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-dev.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF TEST" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;TEST&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] TEST environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;financeDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;f3-booking-test.newshore.es&quot;);
vars.put(&quot;Is_PSS_PRO&quot;, &quot;false&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF PRO" enabled="true">
            <stringProp name="IfController.condition">&quot;${GLOBAL_ENVIRONMENT}&quot; == &quot;PRO&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] PRO environment data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;bookingDNS&quot;, &quot;www.flyadeal.com&quot;);
vars.put(&quot;pricingDNS&quot;, &quot;www.flyadeal.com&quot;);
vars.put(&quot;contactsDNS&quot;, &quot;www.flyadeal.com&quot;);
vars.put(&quot;financeDNS&quot;, &quot;www.flyadeal.com&quot;);
vars.put(&quot;servicesDNS&quot;, &quot;www.flyadeal.com&quot;);
vars.put(&quot;resourcesDNS&quot;, &quot;www.flyadeal.com&quot;);
vars.put(&quot;accountsDNS&quot;, &quot;www.flyadeal.com&quot;);
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] generic test case data" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;AvailableServices&quot;, &quot;[&apos;Baggage&apos;,&apos;Insurance&apos;,&apos;MedicalInsurance&apos;,&apos;CancellationInsurance&apos;,&apos;Priority&apos;,&apos;BusinessLounge&apos;,&apos;Oversize&apos;,&apos;Pet&apos;,&apos;UnaccompaniedMinor&apos;,&apos;SpecialAssistance&apos;]&quot;);
vars.put(&quot;currencyCode&quot;, &quot;SAR&quot;);
vars.put(&quot;EticketsGenerationRequired&quot;, &quot;false&quot;);
vars.put(&quot;ShouldValidatePaymentExternally&quot;, &quot;false&quot;);
vars.put(&quot;ShouldWaitUntilPaymentIsApproved&quot;, &quot;true&quot;);
vars.put(&quot;VI_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;MC_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;AX_CreditCardNumber&quot;, &quot;&quot;);
vars.put(&quot;DS_CreditCardNumber&quot;, &quot;&quot;);
SampleResult.setIgnore()</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Location data" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">vars.put(&quot;latitude&quot;, &quot;41.2962176&quot;);
vars.put(&quot;longitude&quot;, &quot;2.2198811&quot;);
SampleResult.setIgnore()

//Girona           latitude:41.2962176 longitude:2.2198811	
//Roma             latitude:41,9102415 longitude:12,3959134
//Pisa             latitude:43,7800607 longitude:11,1709279
//Istambul         latitude:41.0055005 longitude:28.7319924	
//Moscow           latitude:55,5815244 longitude:36,8251178	
//Russia (center)  latitude:61,5240097 longitude:105,3187561	
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[BF1] - OW-1ADT-HOLD" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] One Way" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;OW&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;2021-06-27&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;); // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[BF1] - RT-1ADT-HOLD" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Round Trip" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;origin&quot;,&quot;JED&quot;);
vars.put(&quot;destination&quot;,&quot;RUH&quot;);
vars.put(&quot;tripType&quot;,&quot;RT&quot;);  // OW / RT
vars.put(&quot;outboundDate&quot;,&quot;2020-10-11&quot;);
vars.put(&quot;returnDate&quot;,&quot;2020-10-18&quot;);
vars.put(&quot;outboundProductClass&quot;,&quot;YA&quot;); // TO BE DEFINED
vars.put(&quot;returnProductClass&quot;,&quot;YA&quot;);  // TO BE DEFINED
vars.put(&quot;adultsNumber&quot;,&quot;1&quot;);
vars.put(&quot;teenageNumber&quot;,&quot;0&quot;);
vars.put(&quot;childrenNumber&quot;,&quot;0&quot;);
vars.put(&quot;infantsNumber&quot;,&quot;0&quot;);
vars.put(&quot;paymentMethod&quot;,&quot;MC&quot;);  // TO BE DEFINED
vars.put(&quot;servicesToSell&quot;,&quot;{\&quot;itemsToSell\&quot;: [ ] }&quot;); // {\&quot;itemsToSell\&quot;:[{\&quot;paxNumber\&quot;:\&quot;N\&quot;,\&quot;serviceCodes\&quot;:[\&quot;XXX\&quot;,\&quot;YYY\&quot;,...]}]} 
SampleResult.setIgnore()
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="778434137">adultsIndex</stringProp>
            <stringProp name="783261509">currentAdultReferenceId</stringProp>
            <stringProp name="-1499443219">teenageIndex</stringProp>
            <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
            <stringProp name="1231274515">childrenIndex</stringProp>
            <stringProp name="1203845795">currentChildReferenceId</stringProp>
            <stringProp name="148663813">infantsIndex</stringProp>
            <stringProp name="1609246471">currentInfantReferenceId</stringProp>
            <stringProp name="-2043461269">serviceSellIndex</stringProp>
            <stringProp name="-788668939">paxInfo</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1811996734">
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="3938">{}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Static Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="recordLocator" elementType="Argument">
              <stringProp name="Argument.name">recordLocator</stringProp>
              <stringProp name="Argument.value">NO_DATA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isPaymentOk" elementType="Argument">
              <stringProp name="Argument.name">isPaymentOk</stringProp>
              <stringProp name="Argument.value">NO_DATA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="outboundDateBeginWeekDay" elementType="Argument">
              <stringProp name="Argument.name">outboundDateBeginWeekDay</stringProp>
              <stringProp name="Argument.value">2019-11-26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="outboundDateEndWeekDay" elementType="Argument">
              <stringProp name="Argument.name">outboundDateEndWeekDay</stringProp>
              <stringProp name="Argument.value">2019-12-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnDateBeginWeekDay" elementType="Argument">
              <stringProp name="Argument.name">returnDateBeginWeekDay</stringProp>
              <stringProp name="Argument.value">2019-11-26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnDateEndWeekDay" elementType="Argument">
              <stringProp name="Argument.name">returnDateEndWeekDay</stringProp>
              <stringProp name="Argument.value">2019-12-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="paymentRetries" elementType="Argument">
              <stringProp name="Argument.name">paymentRetries</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AdultTypeObject" elementType="Argument">
              <stringProp name="Argument.name">AdultTypeObject</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;ADT&quot;}}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ChildTypeObject" elementType="Argument">
              <stringProp name="Argument.name">ChildTypeObject</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;CHD&quot;}}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TeenageTypeObject" elementType="Argument">
              <stringProp name="Argument.name">TeenageTypeObject</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;TNG&quot;}}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InfantTypeObject" elementType="Argument">
              <stringProp name="Argument.name">InfantTypeObject</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;:{&quot;code&quot;:&quot;INF&quot;}}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="paxCreationRequest" elementType="Argument">
              <stringProp name="Argument.name">paxCreationRequest</stringProp>
              <stringProp name="Argument.value">NO_DATA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="availabilityRequests" elementType="Argument">
              <stringProp name="Argument.name">availabilityRequests</stringProp>
              <stringProp name="Argument.value">NO_DATA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isPaymentApproved" elementType="Argument">
              <stringProp name="Argument.name">isPaymentApproved</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="bookingStatus" elementType="Argument">
              <stringProp name="Argument.name">bookingStatus</stringProp>
              <stringProp name="Argument.value">Hold</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pricing Dates Calculation" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">var currentOutboundDate = new Date(&quot;${outboundDate}&quot;);
var beginOutboundDate = new Date(&quot;${outboundDate}&quot;);
var endOutboundDate = new Date(&quot;${outboundDate}&quot;);
beginOutboundDate.setDate(currentOutboundDate.getDate() - 2);
vars.put(&quot;outboundDateBeginWeekDay&quot;,beginOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginOutboundDate.getDate()).slice(-2));
endOutboundDate.setDate(currentOutboundDate.getDate() + 2);
vars.put(&quot;outboundDateEndWeekDay&quot;,endOutboundDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (endOutboundDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endOutboundDate.getDate()).slice(-2));

var currentReturnDate = new Date(&quot;${returnDate}&quot;);
var beginReturnDate = new Date(&quot;${returnDate}&quot;);
var endReturnDate = new Date(&quot;${returnDate}&quot;);
beginReturnDate.setDate(currentReturnDate.getDate() - 2);
vars.put(&quot;returnDateBeginWeekDay&quot;,beginReturnDate.getFullYear()+&quot;-&quot;+(&quot;0&quot; + (beginReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + beginReturnDate.getDate()).slice(-2));
endReturnDate.setDate(currentReturnDate.getDate() + 2);
vars.put(&quot;returnDateEndWeekDay&quot;,endReturnDate.getFullYear()+&quot;-&quot; + (&quot;0&quot; + (endReturnDate.getMonth() + 1)).slice(-2) + &quot;-&quot; + (&quot;0&quot; + endReturnDate.getDate()).slice(-2));</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Pax Calculation" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">var AdultTypeObject = &apos;${AdultTypeObject}&apos;;
var ChildTypeObject =&apos;${ChildTypeObject}&apos;;
var TeenageTypeObject = &apos;${TeenageTypeObject}&apos;;
var InfantTypeObject = &apos;${InfantTypeObject}&apos;;

var adultsNumber = parseInt(&quot;${adultsNumber}&quot;,10);
var teenageNumber = parseInt(&quot;${teenageNumber}&quot;,10);
var childrenNumber = parseInt(&quot;${childrenNumber}&quot;,10);
var infantsNumber = parseInt(&quot;${infantsNumber}&quot;,10);

var request = &quot;[&quot;;

for (var i=0;i&lt;adultsNumber;i++)
{
	request+=AdultTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;teenageNumber;i++)
{
	request+=TeenageTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;childrenNumber;i++)
{
	request+=ChildTypeObject+&quot;,&quot;;
}

for (var i=0;i&lt;infantsNumber;i++)
{
	request+=InfantTypeObject+&quot;,&quot;;
}

request = request.substr(0,request.lastIndexOf(&quot;,&quot;));
request+=&quot;]&quot;;

vars.put(&quot;paxCreationRequest&quot;,request);</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JS -&gt; Availbility Request Calculation" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">var requests =[
  { 
    &quot;id&quot;:&quot;1&quot;,
    &quot;currency&quot;:&quot;${currencyCode}&quot;,
    &quot;promoCode&quot;:null,
    &quot;origin&quot;:&quot;${origin}&quot;,
    &quot;destination&quot;:&quot;${destination}&quot;,
    &quot;pax&quot;:{ 
      &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
      &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
      &quot;INF&quot;:&quot;${infantsNumber}&quot;
    },
    &quot;filters&quot;:{
    	 &quot;Position&quot;:[&quot;${latitude}&quot;, &quot;${longitude}&quot;]
    	},
    &quot;details&quot;:{ 
      &quot;lowestPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDateBeginWeekDay}&quot;,
        &quot;end&quot;:&quot;${outboundDateEndWeekDay}&quot;
        }
      ],
      &quot;allPrice&quot;:[ 
        { 
        &quot;begin&quot;:&quot;${outboundDate}&quot;,
        &quot;end&quot;:&quot;${outboundDate}&quot;
        }
      ]
    }
  }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({ 
         &quot;id&quot;:&quot;2&quot;,
         &quot;currency&quot;:&quot;${currencyCode}&quot;,
         &quot;promoCode&quot;:null,
         &quot;origin&quot;:&quot;${destination}&quot;,
         &quot;destination&quot;:&quot;${origin}&quot;,
         &quot;pax&quot;:{ 
            &quot;ADT&quot;:&quot;${adultsNumber}&quot;,
      	  &quot;TNG&quot;:&quot;${teenageNumber}&quot;,
            &quot;CHD&quot;:&quot;${childrenNumber}&quot;,
            &quot;INF&quot;:&quot;${infantsNumber}&quot;
         },
         &quot;details&quot;:{ 
            &quot;lowestPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDateBeginWeekDay}&quot;,
                  &quot;end&quot;:&quot;${returnDateEndWeekDay}&quot;
               }
            ],
            &quot;allPrice&quot;:[ 
               { 
                  &quot;begin&quot;:&quot;${returnDate}&quot;,
                  &quot;end&quot;:&quot;${returnDate}&quot;
               }
            ]
         }
      });
}

vars.put(&quot;availabilityRequests&quot;,JSON.stringify(requests));</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] pricing" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &#xd;
   &quot;journeyPriceRequests&quot;:${availabilityRequests},&#xd;
   &quot;customerId&quot;:&quot;${CustomerId}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
          <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/journeys</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">ApiKey</stringProp>
                <stringProp name="Header.value">${PricingApiKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
            <stringProp name="JSON_PATH">$.success</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_JourneyId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">journeyIdOutbound</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[0].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_FareId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">fareIdOutbound</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdOutbound}&apos;)].fares[?(@.productClass == &apos;${outboundProductClass}&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_JourneyId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">journeyIdReturn</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.journeyPriceResponses[1].schedules[?(@.availability == &apos;Available&apos;)].journeys[?(@.scheduleType == &apos;AllPrice&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReturnJourneysToSell_FareId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">fareIdReturn</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..journeys[?(@.id == &apos;${journeyIdReturn}&apos;)].fares[?(@.productClass == &apos;${returnProductClass}&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] booking" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;request&quot;:{&#xd;
		&quot;booking&quot;:{&#xd;
			&quot;pax&quot;:${paxCreationRequest},&#xd;
			&quot;pricing&quot;: {&#xd;
				&quot;currency&quot;: &quot;${currencyCode}&quot;&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;debug&quot;:{&#xd;
		&quot;journeyIdOutbound&quot;: &quot;${journeyIdOutbound}&quot;,&#xd;
		&quot;fareIdOutbound&quot;: &quot;${fareIdOutbound}&quot;,&#xd;
		&quot;journeyIdReturn&quot;: &quot;${journeyIdReturn}&quot;,&#xd;
		&quot;fareIdReturn&quot;: &quot;${fareIdReturn}&quot;,&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
            <stringProp name="JSON_PATH">$.success</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">ApiKey</stringProp>
                <stringProp name="Header.value">${BookingApiKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If there&apos;s availability..." enabled="true">
          <stringProp name="IfController.condition">((&quot;${journeyIdOutbound}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdOutbound}&quot; != &quot;NO_DATA&quot;) &amp;&amp; (&quot;${tripType}&quot;==&quot;OW&quot; || (&quot;${journeyIdReturn}&quot; != &quot;NO_DATA&quot; &amp;&amp; &quot;${fareIdReturn}&quot; != &quot;NO_DATA&quot;)))</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Stations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${resourcesDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${resourcesPath}/api/v1/resource/stations</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${ResourcesApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">stations</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.stations</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JS -&gt; Stations on booking" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var stations = JSON.parse(&apos;${stations}&apos;);
var originCountry = &quot;&quot;;
var destinationCountry = &quot;&quot;;

for (var i=0;i&lt;stations.length;i++)
{
	if(stations[i].code == &quot;${origin}&quot;)
	{
		originCountry = stations[i].countryCode;
	}	
	else if(stations[i].code == &quot;${destination}&quot;)
	{
		destinationCountry = stations[i].countryCode;
	}
}
vars.put(&quot;originCountry&quot;, originCountry);
log.info(&quot;originCountry: &quot; + originCountry);
vars.put(&quot;destinationCountry&quot;, destinationCountry);
log.info(&quot;destinationCountry: &quot; + destinationCountry);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Travel Documents-${originCountry}-${destinationCountry}-BF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${resourcesDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${resourcesPath}/api/v1/resource/travelDocuments?data=%7B%22origin%22:%22${originCountry}%22,%22destination%22:%22${destinationCountry}%22,%22flow%22:%22Booking%22%7D</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${ResourcesApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">travelDocs</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.travelDocuments</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] Entrance Documents-${originCountry}-${destinationCountry}-BF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${resourcesDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${resourcesPath}/api/v1/resource/entrancedocuments?data=%7B%22origin%22:%22${originCountry}%22,%22destination%22:%22${destinationCountry}%22,%22flow%22:%22Booking%22%7D</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${ResourcesApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">entranceDocs</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.entranceDocuments</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
              <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Creating</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] journeys" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;journeys&quot;:${journeysToSell}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/journeys</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Journeys To Sell Calculation" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var requests =[
  {
         &quot;journeyId&quot;:&quot;${journeyIdOutbound}&quot;,
         &quot;fareId&quot;:&quot;${fareIdOutbound}&quot;
      }
];
if(&quot;${tripType}&quot; == &quot;RT&quot;)
{
	requests.push({
         &quot;journeyId&quot;:&quot;${journeyIdReturn}&quot;,
         &quot;fareId&quot;:&quot;${fareIdReturn}&quot;
      });
}

vars.put(&quot;journeysToSell&quot;,JSON.stringify(requests));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
              <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Creating</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Pax Update" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="778434137">adultsIndex</stringProp>
                <stringProp name="783261509">currentAdultReferenceId</stringProp>
                <stringProp name="-1499443219">teenageIndex</stringProp>
                <stringProp name="-752929286">currentTeenageReferenceId</stringProp>
                <stringProp name="1231274515">childrenIndex</stringProp>
                <stringProp name="1203845795">currentChildReferenceId</stringProp>
                <stringProp name="148663813">infantsIndex</stringProp>
                <stringProp name="1609246471">currentInfantReferenceId</stringProp>
                <stringProp name="-2043461269">serviceSellIndex</stringProp>
                <stringProp name="-788668939">paxInfo</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1811996734">
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="3938">{}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="AdultsData" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rob&quot;,
      &quot;lastname&quot;:&quot;flynn&quot;,
      &quot;birthdate&quot;: &quot;1985-10-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;123123123&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;ryan&quot;,
      &quot;birthdate&quot;: &quot;1981-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;N&quot;,
      &quot;docNumber&quot;:&quot;1069959896&quot;,
      &quot;docIssuedCountry&quot;:&quot;SA&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;mary&quot;,
      &quot;lastname&quot;:&quot;grow&quot;,
      &quot;birthdate&quot;: &quot;1989-01-02&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;654221566&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2024-09-11&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;alison&quot;,
      &quot;lastname&quot;:&quot;flake&quot;,
      &quot;birthdate&quot;: &quot;1942-12-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98688992&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2028-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;dez&quot;,
      &quot;lastname&quot;:&quot;farfalle&quot;,
      &quot;birthdate&quot;: &quot;1975-08-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;975678323&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;salim&quot;,
      &quot;lastname&quot;:&quot;cross&quot;,
      &quot;birthdate&quot;: &quot;1931-11-20&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;2367875322&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;rumoi&quot;,
      &quot;lastname&quot;:&quot;yakarta&quot;,
      &quot;birthdate&quot;: &quot;1995-03-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;9876673553&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;anastasia&quot;,
      &quot;lastname&quot;:&quot;delar&quot;,
      &quot;birthdate&quot;: &quot;2000-01-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;68548545&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;bob&quot;,
      &quot;lastname&quot;:&quot;astro&quot;,
      &quot;birthdate&quot;: &quot;1998-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;552864552&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;john&quot;,
      &quot;lastname&quot;:&quot;papaya&quot;,
      &quot;birthdate&quot;: &quot;2001-02-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;638924285&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;adultsData&quot;,JSON.stringify(data));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TeenageData" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruno&quot;,
      &quot;lastname&quot;:&quot;Wayno&quot;,
      &quot;birthdate&quot;: &quot;2006-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Bruce&quot;,
      &quot;lastname&quot;:&quot;Wayne&quot;,
      &quot;birthdate&quot;: &quot;2005-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Austrian&quot;,
      &quot;lastname&quot;:&quot;Expect&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;Plont&quot;,
      &quot;lastname&quot;:&quot;Trust&quot;,
      &quot;birthdate&quot;: &quot;2007-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Strucs&quot;,
      &quot;lastname&quot;:&quot;Trucs&quot;,
      &quot;birthdate&quot;: &quot;2004-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Flipp&quot;,
      &quot;lastname&quot;:&quot;Plong&quot;,
      &quot;birthdate&quot;: &quot;2006-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Darms&quot;,
      &quot;lastname&quot;:&quot;Floks&quot;,
      &quot;birthdate&quot;: &quot;2003-10-04&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    }
  ]
};
vars.put(&quot;teenageData&quot;,JSON.stringify(data));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ChildrenData" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;kloas&quot;,
      &quot;lastname&quot;:&quot;trutt&quot;,
      &quot;birthdate&quot;: &quot;2011-11-01&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;963852741&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2025-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;Lofout&quot;,
      &quot;lastname&quot;:&quot;Lepass&quot;,
      &quot;birthdate&quot;: &quot;2010-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;lina&quot;,
      &quot;lastname&quot;:&quot;strauss&quot;,
      &quot;birthdate&quot;: &quot;2009-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;987452321&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;paty&quot;,
      &quot;lastname&quot;:&quot;clown&quot;,
      &quot;birthdate&quot;: &quot;2012-12-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98212524&quot;,
      &quot;docIssuedCountry&quot;:&quot;US&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glouso&quot;,
      &quot;lastname&quot;:&quot;tresca&quot;,
      &quot;birthdate&quot;: &quot;2011-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;95268552&quot;,
      &quot;docIssuedCountry&quot;:&quot;AR&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;sasha&quot;,
      &quot;lastname&quot;:&quot;roland&quot;,
      &quot;birthdate&quot;: &quot;2015-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;894256242&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;moskor&quot;,
      &quot;lastname&quot;:&quot;trujillo&quot;,
      &quot;birthdate&quot;: &quot;2011-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;98524651&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;zoe&quot;,
      &quot;lastname&quot;:&quot;ventana&quot;,
      &quot;birthdate&quot;: &quot;2010-12-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5641528523&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;brescio&quot;,
      &quot;lastname&quot;:&quot;moreno&quot;,
      &quot;birthdate&quot;: &quot;2011-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;5263525663&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;blunsen&quot;,
      &quot;lastname&quot;:&quot;jaima&quot;,
      &quot;birthdate&quot;: &quot;2016-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;59529595295&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;childrenData&quot;,JSON.stringify(data));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="InfantsData" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var data = {
  &quot;pax&quot;: [
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;biusa&quot;,
      &quot;lastname&quot;:&quot;stran&quot;,
      &quot;birthdate&quot;: &quot;2019-11-01&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584898&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2027-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;gloglot&quot;,
      &quot;lastname&quot;:&quot;grunchen&quot;,
      &quot;birthdate&quot;: &quot;2019-05-06&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584865&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;olansa&quot;,
      &quot;lastname&quot;:&quot;dellau&quot;,
      &quot;birthdate&quot;: &quot;2019-10-04&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;B&quot;,
      &quot;docNumber&quot;:&quot;651584833&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-11-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;constanza&quot;,
      &quot;lastname&quot;:&quot;laberta&quot;,
      &quot;birthdate&quot;: &quot;2019-06-10&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584812&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-03-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;lorotes&quot;,
      &quot;lastname&quot;:&quot;campos&quot;,
      &quot;birthdate&quot;: &quot;2019-07-09&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584443&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-04-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;polarlia&quot;,
      &quot;lastname&quot;:&quot;perpescu&quot;,
      &quot;birthdate&quot;: &quot;2019-11-23&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584645&quot;,
      &quot;docIssuedCountry&quot;:&quot;IT&quot;,
      &quot;docExpirationDate&quot; : &quot;2023-08-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;jiuson&quot;,
      &quot;lastname&quot;:&quot;glob&quot;,
      &quot;birthdate&quot;: &quot;2019-03-23&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;651584775&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MRS&quot;,
      &quot;name&quot;:&quot;valery&quot;,
      &quot;lastname&quot;:&quot;flippo&quot;,
      &quot;birthdate&quot;: &quot;2019-10-09&quot;,
      &quot;gender&quot;: &quot;Female&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;58558558&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;ramau&quot;,
      &quot;lastname&quot;:&quot;relon&quot;,
      &quot;birthdate&quot;: &quot;2019-05-12&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8855285855&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    },
    {
    	&quot;title&quot;:&quot;MR&quot;,
      &quot;name&quot;:&quot;glosconson&quot;,
      &quot;lastname&quot;:&quot;peppercutten&quot;,
      &quot;birthdate&quot;: &quot;2019-05-11&quot;,
      &quot;gender&quot;: &quot;Male&quot;,
      &quot;docType&quot;: &quot;P&quot;,
      &quot;docNumber&quot;:&quot;8555555&quot;,
      &quot;docIssuedCountry&quot;:&quot;ES&quot;,
      &quot;docExpirationDate&quot; : &quot;2022-10-01&quot;
    }
  ]
};
vars.put(&quot;infantsData&quot;,JSON.stringify(data));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="ADULTS" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${adultsIndex} &lt;= ${adultsNumber})} </stringProp>
            </WhileController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var paxData = JSON.parse(&apos;${adultsData}&apos;);
var currentPax = paxData.pax[${adultsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;ADT&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${adultsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentAdultReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Adult info" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;ADT&quot;
         },
         &quot;referenceId&quot;:&quot;${currentAdultReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
    		  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         },
         &quot;memberNumbers&quot;:[]
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="TEENAGE" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${teenageIndex} &lt;= ${teenageNumber})} </stringProp>
            </WhileController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var paxData = JSON.parse(&apos;${teenageData}&apos;);
var currentPax = paxData.pax[${teenageIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;TNG&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${teenageIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentTeenageReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Teenager info" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;TNG&quot;
         },
         &quot;referenceId&quot;:&quot;${currentTeenageReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="teenageIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var teenageIndex = parseInt(&quot;${teenageIndex}&quot;, 10);
teenageIndex = teenageIndex + 1;
vars.put(&quot;teenageIndex&quot;, teenageIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="CHILDREN" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${childrenIndex} &lt;= ${childrenNumber})} </stringProp>
            </WhileController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var paxData = JSON.parse(&apos;${childrenData}&apos;);
var currentPax = paxData.pax[${childrenIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;CHD&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${childrenIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentChildReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Child info" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;CHD&quot;
         },
         &quot;referenceId&quot;:&quot;${currentChildReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
               &quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="childrenIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var childrenIndex = parseInt(&quot;${childrenIndex}&quot;, 10);
childrenIndex = childrenIndex + 1;
vars.put(&quot;childrenIndex&quot;, childrenIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="INFANTS" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${infantsIndex} &lt;= ${infantsNumber})} </stringProp>
            </WhileController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Pax Data" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var paxData = JSON.parse(&apos;${infantsData}&apos;);
var currentPax = paxData.pax[${infantsIndex}];
vars.put(&quot;paxName&quot;,currentPax.name);
vars.put(&quot;paxLastName&quot;,currentPax.lastname);
vars.put(&quot;paxTitle&quot;,currentPax.title);
vars.put(&quot;paxDocType&quot;,currentPax.docType);
vars.put(&quot;paxDocNumber&quot;,currentPax.docNumber);
vars.put(&quot;paxDocNumberExpirationDate&quot;,currentPax.docExpirationDate);
vars.put(&quot;paxDocIssuedCountry&quot;,currentPax.docIssuedCountry);
vars.put(&quot;paxDatebirth&quot;,currentPax.birthdate);
vars.put(&quot;paxGender&quot;,currentPax.gender);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Current Pax" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var booking = JSON.parse(&apos;${booking}&apos;);
var paxType = &quot;INF&quot;;
var pax = &quot;NO_DATA&quot;;

var paxTypeIndex = 1;
for (var i=0; i&lt; booking.pax.length; i++)
{
	if(booking.pax[i].type.code == paxType)
	{
		if(paxTypeIndex == ${infantsIndex})
		{
			pax = booking.pax[i]; 	
		}

		paxTypeIndex++;
	}
}

vars.put(&quot;paxId&quot;, pax.id);
vars.put(&quot;currentInfantReferenceId&quot;, pax.referenceId);
SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Infant info" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var paxInfo = JSON.parse(&apos;${paxInfo}&apos;);
paxInfo[&quot;${paxId}&quot;] = {
         &quot;type&quot;:{
            &quot;code&quot;:&quot;INF&quot;
         },
         &quot;referenceId&quot;:&quot;${currentInfantReferenceId}&quot;,
         &quot;id&quot;:&quot;${paxId}&quot;,
         &quot;name&quot;:{
            &quot;title&quot;:&quot;${paxTitle}&quot;,
            &quot;first&quot;:&quot;${paxName}&quot;,
            &quot;last&quot;:&quot;${paxLastName}&quot;
         },
         &quot;documents&quot;:[
            {
            	&quot;type&quot;:&quot;${paxDocType}&quot;,
               &quot;expirationDate&quot;:&quot;${paxDocNumberExpirationDate}&quot;,
               &quot;number&quot;:&quot;${paxDocNumber}&quot;,
               &quot;issuedCountry&quot;: &quot;${paxDocIssuedCountry}&quot;
            }
         ],
         &quot;personInfo&quot;:{
         	  &quot;gender&quot;:&quot;${paxGender}&quot;,
            &quot;dateOfBirth&quot;:&quot;${paxDatebirth}&quot;,
            &quot;nationality&quot;:&quot;${paxDocIssuedCountry}&quot;
         }
      };

vars.put(&quot;paxInfo&quot;,JSON.stringify(paxInfo));
//SampleResult.setIgnore();</stringProp>
              </JSR223Sampler>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="currentInfantReferenceId increment" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var currentInfantReferenceId = parseInt(&quot;${currentInfantReferenceId}&quot;, 10);
currentInfantReferenceId = currentInfantReferenceId + 1;
vars.put(&quot;currentInfantReferenceId&quot;, currentInfantReferenceId);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="InfantsIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var infantsIndex = parseInt(&quot;${infantsIndex}&quot;, 10);
infantsIndex = infantsIndex + 1;
vars.put(&quot;infantsIndex&quot;, infantsIndex);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] pax" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;pax&quot;: ${paxInfo}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/pax</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                <stringProp name="JSON_PATH">$.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ApiKey</stringProp>
                    <stringProp name="Header.value">${BookingApiKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="adultsIndex increment" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var adultsIndex = parseInt(&quot;${adultsIndex}&quot;, 10);
adultsIndex = adultsIndex + 1;
vars.put(&quot;adultsIndex&quot;, adultsIndex);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] contacts" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;contacts&quot;:[&#xd;
      {&#xd;
         &quot;id&quot;:&quot;&quot;,&#xd;
         &quot;mktOption&quot;:false,&#xd;
         &quot;name&quot;:{&#xd;
            &quot;title&quot;:&quot;MR&quot;,&#xd;
            &quot;first&quot;:&quot;contactname&quot;,&#xd;
            &quot;last&quot;:&quot;contactlastname&quot;&#xd;
         },&#xd;
         &quot;address&quot;:{&#xd;
            &quot;addressLine&quot;:&quot;street&quot;,&#xd;
            &quot;city&quot;:&quot; baltimore&quot;,&#xd;
            &quot;country&quot;:&quot;US&quot;,&#xd;
            &quot;zipCode&quot;:&quot;12312&quot;,&#xd;
            &quot;province&quot;:&quot;AZ&quot;&#xd;
            &#xd;
         },&#xd;
         &quot;channels&quot;:[&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Email&quot;,&#xd;
               &quot;info&quot;:&quot;juan.martinez@newshore.es&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;cultureCode&quot;:&quot;en-US&quot;,&#xd;
               &quot;type&quot;:&quot;Phone&quot;,&#xd;
               &quot;info&quot;:&quot;123123123&quot;,&#xd;
               &quot;prefix&quot;:&quot;1&quot;&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${contactsDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${contactsPath}/api/v1/contacts</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${ContactsApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
              <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Creating</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="OutboundJourneysToSell_SegmentId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">segmentIdOutbound</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..segments[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="booking" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">booking</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] services" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;serviceTypes&quot;:${AvailableServices}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${pricingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pricingPath}/api/v1/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${PricingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="pricedServices" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">pricedServices</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.services</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_SERVICE</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
              <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
              <stringProp name="EXPECTED_VALUE">Creating</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${BookingApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] seatmap" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${resourcesDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${resourcesPath}/api/v1/seatmap?segmentId=${segmentIdOutbound}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${ResourcesApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="freeSeat extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">freeSeat</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.availability==&quot;Available&quot;)].seatNumber</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SELL SERVICES" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Dynamic vars" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1474422496">paxesToSellServices</stringProp>
                <stringProp name="737251200">paxToSellServicesIndex</stringProp>
                <stringProp name="453212524">servicesToSellForCurrentPax</stringProp>
                <stringProp name="1565339049">servicesForPaxToSellIndex</stringProp>
                <stringProp name="-194185552">serviceId</stringProp>
                <stringProp name="-1928886718">serviceCode</stringProp>
                <stringProp name="-1928370289">serviceType</stringProp>
                <stringProp name="-1191549461">serviceAvailabilityId</stringProp>
                <stringProp name="-1606244218">paxIdToSellService</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="19538476">
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="48">0</stringProp>
                  <stringProp name="49">1</stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Pax to sell sevices" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//var servicesToSell = JSON.parse(vars.get(&quot;servicesToSell&quot;));
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxesToSellServices = servicesToSell.itemsToSell.length;
vars.put(&quot;paxesToSellServices&quot;, paxesToSellServices);
vars.put(&quot;paxToSellServicesIndex&quot;, 1);
log.info(&quot;&apos;pax to sell sevices&apos; script evaluated correctly. Total pax to be processed: &quot; + paxesToSellServices);
SampleResult.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach pax" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${paxToSellServicesIndex} &lt;= ${paxesToSellServices})}</stringProp>
            </WhileController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] services to sell for currentPax" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var paxToSellServicesIndex = ${paxToSellServicesIndex} - 1;
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var servicesToSellForCurrentPax = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes.length;
vars.put(&quot;servicesToSellForCurrentPax&quot;,servicesToSellForCurrentPax);
vars.put(&quot;servicesForPaxToSellIndex&quot;,1);
log.info(&quot;&apos;services to sell for currentPax&apos; script evaluated correctly. Total services: &quot;+servicesToSellForCurrentPax);
SampleResult.setIgnore();</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="forEach service to sell" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${servicesForPaxToSellIndex} &lt;= ${servicesToSellForCurrentPax})}</stringProp>
              </WhileController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] Service request values extractor" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var pricedServices = JSON.parse(&apos;${pricedServices}&apos;);
var booking = JSON.parse(&apos;${booking}&apos;);
var servicesToSell = JSON.parse(&apos;${servicesToSell}&apos;);
var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;,10) - 1;
var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;,10) - 1;

var currentServiceCodeToSell = servicesToSell.itemsToSell[paxToSellServicesIndex].serviceCodes[servicesForPaxToSellIndex];
var paxNumber = servicesToSell.itemsToSell[paxToSellServicesIndex].paxNumber;
var paxIdToSellService = booking.pax[paxNumber].id;

for(var i=0;i&lt;pricedServices.length;i++)
{
	if(pricedServices[i].info.code == currentServiceCodeToSell)
	{
    		var serviceAvailabilityId = pricedServices[i].availability[0].sellKey; // TODO: First segmnent only?
    
		vars.put(&quot;serviceId&quot;,pricedServices[i].id);
		vars.put(&quot;serviceCode&quot;,currentServiceCodeToSell);
		vars.put(&quot;serviceType&quot;,pricedServices[i].info.type);
		vars.put(&quot;serviceAvailabilityId&quot;,serviceAvailabilityId);
		vars.put(&quot;paxIdToSellService&quot;,paxIdToSellService);
		log.info(&quot;&apos;Service request values extractor&apos; script evaluated correctly. Detected service: &quot;+currentServiceCodeToSell+ &quot; for pax &quot; + paxIdToSellService);		
	}
}
SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] add service" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;services&quot;: [&#xd;
    {&#xd;
      &quot;serviceSellKey&quot;: &quot;${serviceId}&quot;,&#xd;
      &quot;code&quot;: &quot;${serviceCode}&quot;,&#xd;
      &quot;type&quot;: &quot;${serviceType}&quot;,&#xd;
      &quot;paxId&quot;: &quot;${paxIdToSellService}&quot;,&#xd;
      &quot;sellKey&quot;: &quot;${serviceAvailabilityId}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${servicesDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${servicesPath}/api/v1/service</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${ServicesApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="serviceSellIndex increment" enabled="true">
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">var serviceSellIndex = parseInt(&quot;${serviceSellIndex}&quot;, 10);
serviceSellIndex = serviceSellIndex + 1;
vars.put(&quot;serviceSellIndex&quot;, serviceSellIndex);</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET] servicesForPaxToSellIndex increment" enabled="true">
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">var servicesForPaxToSellIndex = parseInt(&apos;${servicesForPaxToSellIndex}&apos;, 10);
servicesForPaxToSellIndex = servicesForPaxToSellIndex + 1;
vars.put(&apos;servicesForPaxToSellIndex&apos;, servicesForPaxToSellIndex);
log.info(&quot;&apos;servicesForPaxToSellIndex increment&apos; script evaluated correctly. New index value:&quot;+servicesForPaxToSellIndex);
SampleResult.setIgnore();</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[SET]  paxToSellServicesIndex increment" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var paxToSellServicesIndex = parseInt(&apos;${paxToSellServicesIndex}&apos;, 10);
paxToSellServicesIndex = paxToSellServicesIndex + 1;
vars.put(&apos;paxToSellServicesIndex&apos;, paxToSellServicesIndex);
log.info(&quot;&apos;paxToSellServicesIndex increment&apos; script evaluated correctly. New index value:&quot;+paxToSellServicesIndex);
SampleResult.setIgnore();</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] availablemethods" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/availablemethods</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
              <stringProp name="JSON_PATH">$.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">ApiKey</stringProp>
                  <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF NOT PSS PRO" enabled="true">
            <stringProp name="IfController.condition">&quot;${Is_PSS_PRO}&quot; == &quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Payment Selection" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MC Payment" enabled="true">
                <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;MC&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment MC" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${MC_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;MC&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/creditcard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="VI Payment" enabled="true">
                <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;VI&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment VI" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${VI_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;VI&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/creditcard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AX Payment" enabled="true">
                <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;AX&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment AX" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${AX_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;1234&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;AX&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/creditcard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="DS Payment" enabled="true">
                <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;DS&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment DS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
   &quot;holder&quot;:&quot;Kelly Ginn&quot;,&#xd;
   &quot;number&quot;:&quot;${DS_CreditCardNumber}&quot;,&#xd;
   &quot;verifyCode&quot;:&quot;123&quot;,&#xd;
   &quot;expirationMonth&quot;:&quot;4&quot;,&#xd;
   &quot;expirationYear&quot;:&quot;2022&quot;,&#xd;
   &quot;method&quot;:&quot;DS&quot;,&#xd;
   &quot;collectedCurrencyCode&quot;:&quot;&quot;,&#xd;
   &quot;DccStatus&quot;:&quot;NotOffered&quot;,&#xd;
   &quot;type&quot;:&quot;CreditCard&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/creditcard</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentOk" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">isPaymentOk</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.success</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Sberbank Payment" enabled="true">
                <stringProp name="IfController.condition">&quot;${paymentMethod}&quot; == &quot;SBERBANK&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                  <stringProp name="HTTPSampler.method">PATCH</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] payment SBERBANK" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/external?Type=PrePaid&amp;Method=${paymentMethod}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="paymentUrl Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">paymentUrl</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                  <stringProp name="HTTPSampler.path">${paymentUrl}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="OrderId Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">orderId</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[name=&apos;orderId&apos;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init pay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="bindingId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">bindingId</stringProp>
                      </elementProp>
                      <elementProp name="orderId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${orderId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">orderId</stringProp>
                      </elementProp>
                      <elementProp name="language" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EN</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">language</stringProp>
                      </elementProp>
                      <elementProp name="card-number" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">4111   1111   1111   1111</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">card-number</stringProp>
                      </elementProp>
                      <elementProp name="pan" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">4111111111111111</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">pan</stringProp>
                      </elementProp>
                      <elementProp name="month" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">month</stringProp>
                      </elementProp>
                      <elementProp name="year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">2024</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">year</stringProp>
                      </elementProp>
                      <elementProp name="cardholderName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">asdas asdad</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cardholderName</stringProp>
                      </elementProp>
                      <elementProp name="cvc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">123</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">cvc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                  <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">max-age=0</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                      </elementProp>
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">navigate</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-User" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                        <stringProp name="Header.value">?1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${paymentUrl}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKey Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">authKey</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[name=&apos;PaReq&apos;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank init auth" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="MD" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${orderId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">MD</stringProp>
                      </elementProp>
                      <elementProp name="PaReq" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${authKey}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">PaReq</stringProp>
                      </elementProp>
                      <elementProp name="TermUrl" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${SBERBANK_dns}/ab/rest/finish3ds.do?lang</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TermUrl</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                  <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Length" elementType="Header">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value">640</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">max-age=0</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                      </elementProp>
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">navigate</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}/ab/${SBERBANK_customerName}/payment</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authorizedSecurityCodeForPayment Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">authorizedSecurityCodeForPayment</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[name=&apos;acctId&apos;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish auth" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="acctId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${authorizedSecurityCodeForPayment}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">acctId</stringProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">12345678</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF8</stringProp>
                  <stringProp name="HTTPSampler.path">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Length" elementType="Header">
                        <stringProp name="Header.name">Content-Length</stringProp>
                        <stringProp name="Header.value">53</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">max-age=0</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                      </elementProp>
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">navigate</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-User" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                        <stringProp name="Header.value">?1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/start.do</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="authKeyResponse Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">authKeyResponse</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[name=&apos;PaRes&apos;]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">NO_DATA</stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] ThridParty bank finish pay" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="MD" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${orderId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">MD</stringProp>
                      </elementProp>
                      <elementProp name="PaRes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.value">${authKeyResponse}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">PaRes</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${SBERBANK_dns}/ab/rest/finish3ds.do?lang=en</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">max-age=0</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}</stringProp>
                      </elementProp>
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">navigate</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${SBERBANK_dns}/acs/auth/finish.do</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.9,es-ES;q=0.8,es;q=0.7,ca;q=0.6</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1355631740">Operation declined. Please check the data and available balance of the card.</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking is confirmed" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If booking is not confirmed" enabled="true">
              <stringProp name="IfController.condition">&quot;${bookingStatus}&quot; != &quot;Confirmed&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Payment Validates OK" enabled="true">
              <stringProp name="IfController.condition">${isPaymentOk}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on creating" enabled="true">
                  <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="EXPECTED_VALUE">Creating</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaxId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">paxId;paxId2</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.pax[0].id;$.booking.pax[1].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA;NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                  <stringProp name="JSON_PATH">$.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">true</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">ApiKey</stringProp>
                      <stringProp name="Header.value">${BookingApiKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RecordLocator extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">recordLocator</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="WCI_pnr" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">WCI_pnr</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.recordLocator</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PaymentId extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">paymentId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.payments[?(@.status == &apos;Pending&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bookingStatus extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">bookingStatus</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.booking.bookingInfo.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NO_DATA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If record locator, then" enabled="true">
                <stringProp name="IfController.condition">&quot;${recordLocator}&quot; != &quot;NO_DATA&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldValidatePaymentExternally" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ShouldValidatePaymentExternally}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PATCH] payment" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
   &quot;PaymentId&quot;: &quot;${paymentId}&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${financeDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${financePath}/api/v1/payment/creditcard</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${FinanceApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="ShouldWaitUntilPaymentIsApproved" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ShouldWaitUntilPaymentIsApproved}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While not Approved" enabled="true">
                    <stringProp name="WhileController.condition">${__javaScript(&quot;${isPaymentApproved}&quot; != &quot;Approved&quot;)} </stringProp>
                  </WhileController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PUT] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">PUT</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">ApiKey</stringProp>
                            <stringProp name="Header.value">${BookingApiKey}</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="isPaymentApproved" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">isPaymentApproved</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$..payments..status</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                        <stringProp name="JSONPostProcessor.defaultValues">false</stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Etickets required" enabled="true">
                  <stringProp name="IfController.condition">&quot;${EticketsGenerationRequired}&quot; == &quot;true&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[POST] etickets generation" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/etickets</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                      <stringProp name="JSON_PATH">$.success</stringProp>
                      <stringProp name="EXPECTED_VALUE">true</stringProp>
                      <boolProp name="JSONVALIDATION">true</boolProp>
                      <boolProp name="EXPECT_NULL">false</boolProp>
                      <boolProp name="INVERT">false</boolProp>
                      <boolProp name="ISREGEX">true</boolProp>
                    </JSONPathAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">ApiKey</stringProp>
                          <stringProp name="Header.value">${BookingApiKey}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[GET] booking" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${bookingDNS}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${bookingPath}/api/v1/booking/session</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Success response" enabled="true">
                    <stringProp name="JSON_PATH">$.success</stringProp>
                    <stringProp name="EXPECTED_VALUE">true</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Booking on confirmed" enabled="true">
                    <stringProp name="JSON_PATH">$.booking.bookingInfo.status</stringProp>
                    <stringProp name="EXPECTED_VALUE">Confirmed</stringProp>
                    <boolProp name="JSONVALIDATION">true</boolProp>
                    <boolProp name="EXPECT_NULL">false</boolProp>
                    <boolProp name="INVERT">false</boolProp>
                    <boolProp name="ISREGEX">true</boolProp>
                  </JSONPathAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">ApiKey</stringProp>
                        <stringProp name="Header.value">${BookingApiKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report." enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Resultados de la Aserción" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ComparisonVisualizer" testclass="ResultCollector" testname="Visualizador de la aserción de comparación" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
